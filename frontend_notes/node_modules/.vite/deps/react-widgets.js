import {
  require_react_dom
} from "./chunk-X3B7SAOS.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-5WWUZCGV.js";

// ../../../node_modules/classnames/index.js
var require_classnames = __commonJS({
  "../../../node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      var nativeCodeString = "[native code]";
      function classNames2() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames2.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
              classes.push(arg.toString());
              continue;
            }
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// ../../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../../node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has3 = require_has();
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has3;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has3(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has3 = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message2, data) {
        this.message = message2;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has3(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has3(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has3(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../../node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../../node_modules/invariant/browser.js
var require_browser = __commonJS({
  "../../../node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant3 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant3;
  }
});

// ../../../node_modules/react-widgets/esm/Calendar.js
var import_classnames7 = __toESM(require_classnames());
var import_prop_types2 = __toESM(require_prop_types());
var import_react22 = __toESM(require_react());

// ../../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// ../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// ../../../node_modules/uncontrollable/lib/esm/hook.js
var import_react = __toESM(require_react());

// ../../../node_modules/uncontrollable/lib/esm/utils.js
var import_invariant = __toESM(require_browser());
function defaultKey(key) {
  return "default" + key.charAt(0).toUpperCase() + key.substr(1);
}

// ../../../node_modules/uncontrollable/lib/esm/hook.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function useUncontrolledProp(propValue, defaultValue, handler) {
  var wasPropRef = (0, import_react.useRef)(propValue !== void 0);
  var _useState = (0, import_react.useState)(defaultValue), stateValue = _useState[0], setState = _useState[1];
  var isProp2 = propValue !== void 0;
  var wasProp = wasPropRef.current;
  wasPropRef.current = isProp2;
  if (!isProp2 && wasProp && stateValue !== defaultValue) {
    setState(defaultValue);
  }
  return [isProp2 ? propValue : stateValue, (0, import_react.useCallback)(function(value) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (handler)
      handler.apply(void 0, [value].concat(args));
    setState(value);
  }, [handler])];
}
function useUncontrolled(props, config) {
  return Object.keys(config).reduce(function(result, fieldName) {
    var _extends210;
    var _ref = result, defaultValue = _ref[defaultKey(fieldName)], propsValue = _ref[fieldName], rest = _objectWithoutPropertiesLoose(_ref, [defaultKey(fieldName), fieldName].map(_toPropertyKey));
    var handlerName = config[fieldName];
    var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
    return _extends({}, rest, (_extends210 = {}, _extends210[fieldName] = value, _extends210[handlerName] = handler, _extends210));
  }, props);
}

// ../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// ../../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// ../../../node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_react2 = __toESM(require_react());

// ../../../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

// ../../../node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_invariant2 = __toESM(require_browser());

// ../../../node_modules/react-widgets/esm/CalendarHeader.js
var import_react3 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/CalendarButton.js
var import_classnames2 = __toESM(require_classnames());
var React4 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/Button.js
var import_classnames = __toESM(require_classnames());
var React3 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/Icon.js
var React2 = __toESM(require_react());
var caretUp = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M288.66 352H31.34c-17.82 0-26.74-21.54-14.14-34.14L145.86 189.2a20 20 0 0 1 28.28 0L302.8 317.86c12.6 12.6 3.68 34.14-14.14 34.14z"
}));
var caretDown = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
}));
var chevronRight = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M285.48 272.97L91.13 467.31a24 24 0 0 1-33.94 0l-22.67-22.66a24 24 0 0 1-.04-33.9L188.5 256 34.48 101.25a24 24 0 0 1 .04-33.9L57.2 44.7a24 24 0 0 1 33.94 0l194.35 194.34a24 24 0 0 1 0 33.94z"
}));
var chevronLeft = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M34.52 239.03L228.87 44.69a24 24 0 0 1 33.94 0l22.67 22.67a24 24 0 0 1 .04 33.9L131.49 256l154.02 154.75a24 24 0 0 1-.04 33.9l-22.67 22.67a24 24 0 0 1-33.94 0L34.52 272.97a24 24 0 0 1 0-33.94z"
}));
var calendar = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 448 512",
  className: "rw-i-calendar",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"
}));
var clock = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 512 512",
  className: "rw-i-clock",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6a12 12 0 0 1 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"
}));
var times = React2.createElement("svg", {
  height: ".8em",
  fill: "currentcolor",
  viewBox: "0 0 352 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
}));
var clear = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentColor",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, React2.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z"
}));
var Spinner = React2.createElement("svg", {
  height: "1.4em",
  viewBox: "0 0 50 50",
  xmlSpace: "preserve",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  fill: "currentcolor",
  d: "M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"
}, React2.createElement("animateTransform", {
  attributeType: "xml",
  attributeName: "transform",
  type: "rotate",
  from: "0 25 25",
  to: "360 25 25",
  dur: "0.6s",
  repeatCount: "indefinite"
})));

// ../../../node_modules/react-widgets/esm/Button.js
var _excluded = ["className", "disabled", "label", "icon", "busy", "children", "spinner"];
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function Button(_ref) {
  let {
    className,
    disabled: disabled2,
    label,
    icon,
    busy,
    children,
    spinner = Spinner
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded);
  return React3.createElement("button", _extends2({
    tabIndex: -1
  }, props, {
    title: label,
    type: "button",
    disabled: disabled2,
    "aria-label": label,
    "aria-disabled": disabled2,
    className: (0, import_classnames.default)(className, "rw-btn")
  }), busy ? spinner : icon, children);
}
var Button_default = Button;

// ../../../node_modules/react-widgets/esm/CalendarButton.js
var _excluded2 = ["className"];
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function CalendarButton(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded2);
  return React4.createElement(Button_default, _extends3({}, props, {
    tabIndex: void 0,
    className: (0, import_classnames2.default)(className, "rw-calendar-btn")
  }));
}
var CalendarButton_default = CalendarButton;

// ../../../node_modules/react-widgets/esm/CalendarHeader.js
function CalendarHeader({
  localizer,
  label,
  labelId,
  onMoveRight,
  onMoveToday,
  onMoveLeft,
  onViewChange,
  prevDisabled,
  todayDisabled,
  upDisabled,
  nextDisabled,
  navigatePrevIcon = chevronLeft,
  navigateNextIcon = chevronRight
}) {
  return import_react3.default.createElement("div", {
    className: "rw-calendar-header"
  }, import_react3.default.createElement(CalendarButton_default, {
    id: labelId,
    onClick: onViewChange,
    className: "rw-calendar-btn-view",
    disabled: upDisabled,
    "aria-live": "polite",
    "aria-atomic": "true"
  }, label, " ", caretDown), import_react3.default.createElement(CalendarButton_default, {
    className: "rw-calendar-btn-left",
    onClick: onMoveLeft,
    disabled: prevDisabled,
    label: localizer.messages.moveBack(),
    icon: navigatePrevIcon
  }), import_react3.default.createElement(CalendarButton_default, {
    className: "rw-calendar-btn-today",
    disabled: todayDisabled,
    onClick: onMoveToday
  }, localizer.messages.moveToday()), import_react3.default.createElement(CalendarButton_default, {
    className: "rw-calendar-btn-right",
    onClick: onMoveRight,
    disabled: nextDisabled,
    label: localizer.messages.moveForward(),
    icon: navigateNextIcon
  }));
}
var CalendarHeader_default = CalendarHeader;

// ../../../node_modules/react-widgets/esm/Century.js
var import_react10 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/CalendarView.js
var import_classnames3 = __toESM(require_classnames());
var import_react9 = __toESM(require_react());

// ../../../node_modules/date-arithmetic/index.js
var date_arithmetic_exports = {};
__export(date_arithmetic_exports, {
  add: () => add,
  century: () => century,
  date: () => date,
  day: () => day,
  decade: () => decade,
  diff: () => diff,
  endOf: () => endOf,
  eq: () => eq,
  gt: () => gt,
  gte: () => gte,
  hours: () => hours,
  inRange: () => inRange,
  lt: () => lt,
  lte: () => lte,
  max: () => max,
  milliseconds: () => milliseconds,
  min: () => min,
  minutes: () => minutes,
  month: () => month,
  neq: () => neq,
  seconds: () => seconds,
  startOf: () => startOf,
  subtract: () => subtract,
  weekday: () => weekday,
  year: () => year
});
var MILI = "milliseconds";
var SECONDS = "seconds";
var MINUTES = "minutes";
var HOURS = "hours";
var DAY = "day";
var WEEK = "week";
var MONTH = "month";
var YEAR = "year";
var DECADE = "decade";
var CENTURY = "century";
var multiplierMilli = {
  "milliseconds": 1,
  "seconds": 1e3,
  "minutes": 60 * 1e3,
  "hours": 60 * 60 * 1e3,
  "day": 24 * 60 * 60 * 1e3,
  "week": 7 * 24 * 60 * 60 * 1e3
};
var multiplierMonth = {
  "month": 1,
  "year": 12,
  "decade": 10 * 12,
  "century": 100 * 12
};
function daysOf(year2) {
  return [31, daysInFeb(year2), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
}
function daysInFeb(year2) {
  return year2 % 4 === 0 && year2 % 100 !== 0 || year2 % 400 === 0 ? 29 : 28;
}
function add(d, num, unit) {
  d = new Date(d);
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      return addMillis(d, num * multiplierMilli[unit]);
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      return addMonths(d, num * multiplierMonth[unit]);
  }
  throw new TypeError('Invalid units: "' + unit + '"');
}
function addMillis(d, num) {
  var nextDate = new Date(+d + num);
  return solveDST(d, nextDate);
}
function addMonths(d, num) {
  var year2 = d.getFullYear(), month2 = d.getMonth(), day2 = d.getDate(), totalMonths = year2 * 12 + month2 + num, nextYear = Math.trunc(totalMonths / 12), nextMonth = totalMonths % 12, nextDay = Math.min(day2, daysOf(nextYear)[nextMonth]);
  var nextDate = new Date(d);
  nextDate.setFullYear(nextYear);
  nextDate.setDate(1);
  nextDate.setMonth(nextMonth);
  nextDate.setDate(nextDay);
  return nextDate;
}
function solveDST(currentDate, nextDate) {
  var currentOffset = currentDate.getTimezoneOffset(), nextOffset = nextDate.getTimezoneOffset();
  var diffMinutes = nextOffset - currentOffset;
  return new Date(+nextDate + diffMinutes * multiplierMilli["minutes"]);
}
function subtract(d, num, unit) {
  return add(d, -num, unit);
}
function startOf(d, unit, firstOfWeek) {
  d = new Date(d);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
      d = month(d, 0);
    case MONTH:
      d = date(d, 1);
    case WEEK:
    case DAY:
      d = hours(d, 0);
    case HOURS:
      d = minutes(d, 0);
    case MINUTES:
      d = seconds(d, 0);
    case SECONDS:
      d = milliseconds(d, 0);
  }
  if (unit === DECADE)
    d = subtract(d, year(d) % 10, "year");
  if (unit === CENTURY)
    d = subtract(d, year(d) % 100, "year");
  if (unit === WEEK)
    d = weekday(d, 0, firstOfWeek);
  return d;
}
function endOf(d, unit, firstOfWeek) {
  d = new Date(d);
  d = startOf(d, unit, firstOfWeek);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
    case MONTH:
    case WEEK:
      d = add(d, 1, unit);
      d = subtract(d, 1, DAY);
      d.setHours(23, 59, 59, 999);
      break;
    case DAY:
      d.setHours(23, 59, 59, 999);
      break;
    case HOURS:
    case MINUTES:
    case SECONDS:
      d = add(d, 1, unit);
      d = subtract(d, 1, MILI);
  }
  return d;
}
var eq = createComparer(function(a, b) {
  return a === b;
});
var neq = createComparer(function(a, b) {
  return a !== b;
});
var gt = createComparer(function(a, b) {
  return a > b;
});
var gte = createComparer(function(a, b) {
  return a >= b;
});
var lt = createComparer(function(a, b) {
  return a < b;
});
var lte = createComparer(function(a, b) {
  return a <= b;
});
function min() {
  return new Date(Math.min.apply(Math, arguments));
}
function max() {
  return new Date(Math.max.apply(Math, arguments));
}
function inRange(day2, min2, max2, unit) {
  unit = unit || "day";
  return (!min2 || gte(day2, min2, unit)) && (!max2 || lte(day2, max2, unit));
}
var milliseconds = createAccessor("Milliseconds");
var seconds = createAccessor("Seconds");
var minutes = createAccessor("Minutes");
var hours = createAccessor("Hours");
var day = createAccessor("Day");
var date = createAccessor("Date");
var month = createAccessor("Month");
var year = createAccessor("FullYear");
function decade(d, val) {
  return val === void 0 ? year(startOf(d, DECADE)) : add(d, val + 10, YEAR);
}
function century(d, val) {
  return val === void 0 ? year(startOf(d, CENTURY)) : add(d, val + 100, YEAR);
}
function weekday(d, val, firstDay) {
  var w = (day(d) + 7 - (firstDay || 0)) % 7;
  return val === void 0 ? w : add(d, val - w, DAY);
}
function diff(date1, date2, unit, asFloat) {
  var dividend, divisor, result;
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      dividend = date2.getTime() - date1.getTime();
      break;
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1);
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  switch (unit) {
    case MILI:
      divisor = 1;
      break;
    case SECONDS:
      divisor = 1e3;
      break;
    case MINUTES:
      divisor = 1e3 * 60;
      break;
    case HOURS:
      divisor = 1e3 * 60 * 60;
      break;
    case DAY:
      divisor = 1e3 * 60 * 60 * 24;
      break;
    case WEEK:
      divisor = 1e3 * 60 * 60 * 24 * 7;
      break;
    case MONTH:
      divisor = 1;
      break;
    case YEAR:
      divisor = 12;
      break;
    case DECADE:
      divisor = 120;
      break;
    case CENTURY:
      divisor = 1200;
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  result = dividend / divisor;
  return asFloat ? result : Math.round(result);
}
function createAccessor(method) {
  var hourLength = function(method2) {
    switch (method2) {
      case "Milliseconds":
        return 36e5;
      case "Seconds":
        return 3600;
      case "Minutes":
        return 60;
      case "Hours":
        return 1;
      default:
        return null;
    }
  }(method);
  return function(d, val) {
    if (val === void 0)
      return d["get" + method]();
    var dateOut = new Date(d);
    dateOut["set" + method](val);
    if (hourLength && dateOut["get" + method]() != val && (method === "Hours" || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {
      dateOut["set" + method](val + hourLength);
    }
    return dateOut;
  };
}
function createComparer(operator) {
  return function(a, b, unit) {
    return operator(+startOf(a, unit), +startOf(b, unit));
  };
}

// ../../../node_modules/react-widgets/esm/dates.js
var isNullOrInvalid = (dte) => dte == null || isNaN(+dte);
var dates = Object.assign({}, date_arithmetic_exports, {
  merge(date2, time, defaultDate) {
    if (isNullOrInvalid(time) && isNullOrInvalid(date2) == null)
      return null;
    if (isNullOrInvalid(time))
      time = defaultDate || /* @__PURE__ */ new Date();
    if (isNullOrInvalid(date2))
      date2 = defaultDate || /* @__PURE__ */ new Date();
    date2 = dates.startOf(date2, "day");
    date2 = dates.hours(date2, dates.hours(time));
    date2 = dates.minutes(date2, dates.minutes(time));
    date2 = dates.seconds(date2, dates.seconds(time));
    return dates.milliseconds(date2, dates.milliseconds(time));
  }
});
var dates_default = dates;

// ../../../node_modules/react-widgets/esm/useFocusManager.js
var import_react8 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useFocusManager.js
var import_react7 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useEventCallback.js
var import_react5 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useCommittedRef.js
var import_react4 = __toESM(require_react());
function useCommittedRef(value) {
  const ref = (0, import_react4.useRef)(value);
  (0, import_react4.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref;
}
var useCommittedRef_default = useCommittedRef;

// ../../../node_modules/@restart/hooks/esm/useEventCallback.js
function useEventCallback(fn) {
  const ref = useCommittedRef_default(fn);
  return (0, import_react5.useCallback)(function(...args) {
    return ref.current && ref.current(...args);
  }, [ref]);
}

// ../../../node_modules/@restart/hooks/esm/useMounted.js
var import_react6 = __toESM(require_react());
function useMounted() {
  const mounted = (0, import_react6.useRef)(true);
  const isMounted = (0, import_react6.useRef)(() => mounted.current);
  (0, import_react6.useEffect)(() => {
    mounted.current = true;
    return () => {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}

// ../../../node_modules/@restart/hooks/esm/useFocusManager.js
function useFocusManager(opts) {
  const isMounted = useMounted();
  const lastFocused = (0, import_react7.useRef)();
  const handle = (0, import_react7.useRef)();
  const willHandle = useEventCallback(opts.willHandle);
  const didHandle = useEventCallback(opts.didHandle);
  const onChange = useEventCallback(opts.onChange);
  const isDisabled = useEventCallback(opts.isDisabled);
  const handleChange = (0, import_react7.useCallback)((focused, event) => {
    if (focused !== lastFocused.current) {
      didHandle == null ? void 0 : didHandle(focused, event);
      if (isMounted() || !focused) {
        lastFocused.current = focused;
        onChange == null ? void 0 : onChange(focused, event);
      }
    }
  }, [isMounted, didHandle, onChange, lastFocused]);
  const handleFocusChange = (0, import_react7.useCallback)((focused, event) => {
    if (isDisabled())
      return;
    if (event && event.persist)
      event.persist();
    if ((willHandle == null ? void 0 : willHandle(focused, event)) === false) {
      return;
    }
    clearTimeout(handle.current);
    if (focused) {
      handleChange(focused, event);
    } else {
      handle.current = window.setTimeout(() => handleChange(focused, event));
    }
  }, [willHandle, handleChange]);
  return (0, import_react7.useMemo)(() => ({
    onBlur: (event) => {
      handleFocusChange(false, event);
    },
    onFocus: (event) => {
      handleFocusChange(true, event);
    }
  }), [handleFocusChange]);
}

// ../../../node_modules/dom-helpers/esm/matches.js
var matchesImpl;
function matches(node3, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl2(n, s) {
      return nativeMatch.call(n, s);
    };
  }
  return matchesImpl(node3, selector);
}

// ../../../node_modules/react-widgets/esm/useFocusManager.js
var isInDisabledFieldset = (node3) => {
  return !!node3 && matches(node3, "fieldset[disabled] *");
};
function useFocusManager2(ref, props = {}, opts = {}) {
  const isMounted = useMounted();
  const [focused, setFocus] = (0, import_react8.useState)(false);
  const isDisabled = useEventCallback(() => props.disabled === true || isInDisabledFieldset(ref.current));
  const events = useFocusManager(Object.assign({}, opts, {
    isDisabled,
    onChange: (focused2) => {
      if (isMounted())
        setFocus(focused2);
    },
    didHandle(focused2, event) {
      let handler = props[focused2 ? "onFocus" : "onBlur"];
      if (handler)
        handler(event);
      if (opts.didHandle && !event.isWidgetDefaultPrevented)
        opts.didHandle(focused2, event);
    }
  }));
  return [events, focused, setFocus];
}

// ../../../node_modules/react-widgets/esm/CalendarView.js
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function clamp(date2, min2, max2) {
  return dates_default.max(dates_default.min(date2, max2), min2);
}
function CalendarView({
  className,
  focusedItem,
  onKeyDown,
  children,
  "aria-labelledby": labelledby
}) {
  const ref = (0, import_react9.useRef)(null);
  const [focusEvents, focused] = useFocusManager2(ref);
  (0, import_react9.useEffect)(() => {
    var _node$querySelector;
    const node3 = ref.current;
    if (!node3 || !focused)
      return;
    (_node$querySelector = node3.querySelector(".rw-cell[tabindex]")) == null ? void 0 : _node$querySelector.focus();
  }, [focusedItem, focused, ref]);
  return import_react9.default.createElement("div", _extends4({
    role: "grid",
    ref,
    tabIndex: -1
  }, focusEvents, {
    onKeyDown,
    "aria-labelledby": labelledby,
    className: (0, import_classnames3.default)(className, "rw-nav-view", "rw-calendar-grid")
  }), children);
}
function CalendarViewCell({
  onChange,
  min: min2,
  max: max2,
  date: date2,
  unit,
  disabled: disabled2,
  selected,
  focusedItem,
  viewUnit,
  children,
  label
}) {
  const isEqual2 = (nextDate) => dates_default.eq(date2, nextDate, unit);
  const isEmpty = !dates_default.inRange(date2, min2, max2, unit);
  const isDisabled = disabled2 || isEmpty;
  const isFocused = !disabled2 && !isEmpty && isEqual2(focusedItem);
  const isSelected = selected && isEqual2(selected);
  const isOffView = date2 && focusedItem && viewUnit && dates_default[viewUnit](date2) !== dates_default[viewUnit](focusedItem);
  const handleChange = () => {
    onChange(clamp(date2, min2, max2));
  };
  return import_react9.default.createElement("div", {
    role: "gridcell",
    title: label,
    "aria-label": label,
    "aria-readonly": disabled2,
    "aria-selected": Boolean(isSelected),
    tabIndex: isFocused ? 0 : void 0,
    onClick: !isDisabled ? handleChange : void 0,
    className: (0, import_classnames3.default)(
      "rw-cell",
      // isNow && 'rw-now',
      isDisabled && "rw-state-disabled",
      isEmpty && "rw-cell-not-allowed",
      isOffView && "rw-cell-off-range",
      isSelected && "rw-state-selected"
    )
  }, import_react9.default.createElement("span", {
    "aria-hidden": true
  }, children));
}
CalendarView.Body = (props) => import_react9.default.createElement("div", _extends4({
  role: "rowgroup",
  className: "rw-calendar-body"
}, props));
CalendarView.Row = (props) => import_react9.default.createElement("div", _extends4({
  role: "row",
  className: "rw-calendar-row"
}, props));
CalendarView.Cell = CalendarViewCell;
var CalendarView_default = CalendarView;

// ../../../node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction = false;
function warning(condition, message2) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message2;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning;

// ../../../node_modules/react-widgets/esm/_.js
function toItemArray(a) {
  if (Array.isArray(a))
    return a;
  return [];
}
var makeArray = (obj, excludeNull = true) => {
  const result = [];
  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);
};
var has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;
function chunk(array3, chunkSize) {
  let index = 0;
  let length = array3 ? array3.length : 0;
  let result = [];
  chunkSize = Math.max(+chunkSize || 1, 1);
  while (index < length)
    result.push(array3.slice(index, index += chunkSize));
  return result;
}
function groupBySortedKeys(groupBy, data, _keys = []) {
  const iter = typeof groupBy === "function" ? groupBy : (item) => item[groupBy];
  tiny_warning_esm_default(typeof groupBy !== "string" || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a property \`${groupBy}\` that doesn't exist in the dataset items, this may be a typo`);
  const groups = /* @__PURE__ */ new Map();
  data.forEach((item) => {
    let group = iter(item);
    if (groups.has(group))
      groups.get(group).push(item);
    else
      groups.set(group, [item]);
  });
  return Array.from(groups);
}

// ../../../node_modules/react-widgets/esm/Century.js
var _excluded3 = ["focusedItem", "disabled", "onChange", "value", "localizer", "min", "max"];
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function CenturyView(_ref) {
  let {
    focusedItem,
    disabled: disabled2,
    onChange,
    value,
    localizer,
    min: min2,
    max: max2
  } = _ref, props = _objectWithoutPropertiesLoose4(_ref, _excluded3);
  const chunks = (0, import_react10.useMemo)(() => chunk(getCenturyDecades(focusedItem), 4), [focusedItem]);
  return import_react10.default.createElement(CalendarView_default, _extends5({}, props, {
    focusedItem
  }), import_react10.default.createElement(CalendarView_default.Body, null, chunks.map((row, rowIdx) => import_react10.default.createElement(CalendarView_default.Row, {
    key: rowIdx
  }, row.map((date2, colIdx) => {
    let label = localizer.formatDate(dates_default.startOf(date2, "decade"), "decade");
    return import_react10.default.createElement(CalendarView_default.Cell, {
      key: colIdx,
      unit: "decade",
      viewUnit: "century",
      label,
      date: date2,
      min: min2,
      max: max2,
      onChange,
      focusedItem,
      selected: value,
      disabled: disabled2
    }, label);
  })))));
}
function getCenturyDecades(_date) {
  let days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  let date2 = dates_default.add(dates_default.startOf(_date, "century"), -20, "year");
  return days.map(() => date2 = dates_default.add(date2, 10, "year"));
}
var Century_default = CenturyView;

// ../../../node_modules/react-widgets/esm/Decade.js
var import_react11 = __toESM(require_react());
var _excluded4 = ["focusedItem", "disabled", "onChange", "value", "localizer", "min", "max"];
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function DecadeView(_ref) {
  let {
    focusedItem,
    disabled: disabled2,
    onChange,
    value,
    localizer,
    min: min2,
    max: max2
  } = _ref, props = _objectWithoutPropertiesLoose5(_ref, _excluded4);
  const chunks = (0, import_react11.useMemo)(() => chunk(getDecadeYears(focusedItem), 4), [focusedItem]);
  return import_react11.default.createElement(CalendarView_default, _extends6({}, props, {
    focusedItem
  }), import_react11.default.createElement(CalendarView_default.Body, null, chunks.map((row, rowIdx) => import_react11.default.createElement(CalendarView_default.Row, {
    key: rowIdx
  }, row.map((date2, colIdx) => {
    let label = localizer.formatDate(date2, "year");
    return import_react11.default.createElement(CalendarView_default.Cell, {
      key: colIdx,
      unit: "year",
      viewUnit: "decade",
      label,
      date: date2,
      min: min2,
      max: max2,
      onChange,
      focusedItem,
      selected: value,
      disabled: disabled2
    }, label);
  })))));
}
function getDecadeYears(_date) {
  let days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  let date2 = dates_default.add(dates_default.startOf(_date, "decade"), -2, "year");
  return days.map(() => date2 = dates_default.add(date2, 1, "year"));
}
var Decade_default = DecadeView;

// ../../../node_modules/react-widgets/esm/Localization.js
var import_react13 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/IntlLocalizer.js
var supportStyles = false;
new Intl.DateTimeFormat(void 0, {
  // @ts-ignore
  get dateStyle() {
    supportStyles = true;
  }
});
var dateShort = {
  day: "numeric",
  month: "numeric",
  year: "numeric"
};
var timeShort = {
  hour: "numeric",
  minute: "numeric"
};
var getFormatter = (culture, options) => Intl.DateTimeFormat(culture, options).format;
var IntlDateLocalizer = class {
  constructor({
    culture = void 0,
    firstOfWeek = 0
  } = {}) {
    this.culture = culture;
    this.firstOfWeek = () => firstOfWeek;
    function normalizeFormat(date2, format) {
      return typeof format === "function" ? format(date2, culture) : date2.toLocaleString(culture, format);
    }
    const formats = {
      date: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short"
        } : dateShort
      ),
      time: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          timeStyle: "short"
        } : timeShort
      ),
      datetime: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short",
          timeStyle: "short"
        } : Object.assign({}, dateShort, timeShort)
      ),
      header: getFormatter(culture, {
        month: "short",
        year: "numeric"
      }),
      weekday: getFormatter(culture, {
        weekday: "narrow"
      }),
      dayOfMonth: getFormatter(culture, {
        day: "2-digit"
      }),
      month: getFormatter(culture, {
        month: "short"
      }),
      year: getFormatter(culture, {
        year: "numeric"
      }),
      decade: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "decade"))}`,
      century: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "century"))}`
    };
    Object.keys(formats).forEach((key) => {
      this[key] = (date2, format) => format ? normalizeFormat(date2, format) : formats[key](date2);
    });
  }
  toFormattedParts(date2, format = {
    dateStyle: "short",
    timeStyle: "short"
  }) {
    return Intl.DateTimeFormat(this.culture, format).formatToParts(date2).filter((p) => p.type !== "timeZoneName");
  }
  parse(value) {
    const date2 = new Date(value);
    return isNaN(+date2) ? null : date2;
  }
};
var IntlNumberLocalizer = class {
  constructor({
    culture = void 0
  } = {}) {
    var _$toLocaleString$m;
    this.culture = culture;
    const decimal = "formatToParts" in Intl.NumberFormat(culture) ? Intl.NumberFormat(culture).formatToParts(1.1)[1].value : ((_$toLocaleString$m = 1.1.toLocaleString(culture).match(/[^\d]/)) == null ? void 0 : _$toLocaleString$m[0]) || ".";
    const formatter = Intl.NumberFormat(culture).format;
    this.decimalCharacter = () => decimal;
    this.format = (num, format) => {
      if (format) {
        return typeof format === "function" ? format(num, culture) : num.toLocaleString(culture, format);
      }
      return formatter(num);
    };
  }
  parse(value) {
    return parseFloat(value.replace(this.decimalCharacter(), "."));
  }
};

// ../../../node_modules/react-widgets/esm/messages.js
var React9 = __toESM(require_react());
var import_react12 = __toESM(require_react());
var messages = {
  moveToday: "Today",
  moveBack: "Navigate back",
  moveForward: "Navigate forward",
  dateButton: "Select date",
  openCombobox: "open combobox",
  emptyList: "There are no items in this list",
  emptyFilter: "The filter returned no results",
  createOption: (_value, searchTerm) => [" Create option", searchTerm && " ", searchTerm && React9.createElement("strong", {
    key: "_"
  }, `"${searchTerm}"`)],
  tagsLabel: "Selected items",
  removeLabel: "Remove selected item",
  noneSelected: "no selected items",
  selectedItems: (labels) => `Selected items: ${labels.join(", ")}`,
  // number
  increment: "Increment value",
  decrement: "Decrement value"
};
var DEFAULTS = {};
function getMessages(defaults = DEFAULTS) {
  let processed = {};
  Object.keys(messages).forEach((message2) => {
    let value = defaults[message2];
    if (value == null)
      value = messages[message2];
    processed[message2] = typeof value === "function" ? value : () => value;
  });
  return processed;
}
var useMessagesWithDefaults = (defaults) => (0, import_react12.useMemo)(() => getMessages(defaults), [defaults]);

// ../../../node_modules/react-widgets/esm/Localization.js
function mergeWithDefaults(date2, number, messages2, formatOverrides = {}) {
  if (!date2 && !number)
    throw new Error("This component requires a Localizer but none was provided");
  return {
    formatOverrides,
    messages: getMessages(messages2),
    formatDate(value, format, userFormat) {
      return date2[format](value, userFormat != null ? userFormat : this.formatOverrides[format]);
    },
    formatNumber(value, userFormat) {
      return number.format(value, userFormat != null ? userFormat : this.formatOverrides.number);
    },
    parseDate: date2.parse.bind(date2),
    parseNumber: number.parse.bind(number),
    decimalCharacter: number.decimalCharacter.bind(number),
    firstOfWeek: date2.firstOfWeek.bind(date2)
  };
}
var LocalizerContext = import_react13.default.createContext(mergeWithDefaults(new IntlDateLocalizer(), new IntlNumberLocalizer()));
var Localization = ({
  date: _date = new IntlDateLocalizer(),
  number: _number = new IntlNumberLocalizer(),
  messages: messages2,
  children
}) => {
  const localizer = (0, import_react13.useMemo)(() => mergeWithDefaults(_date, _number, messages2), [
    _date,
    _number,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    JSON.stringify(messages2)
  ]);
  return import_react13.default.createElement(LocalizerContext.Provider, {
    value: localizer
  }, children);
};
var useLocalizer = (messages2, formats) => {
  const localizer = (0, import_react13.useContext)(LocalizerContext);
  return (0, import_react13.useMemo)(() => {
    if (!messages2 && !formats)
      return localizer;
    return Object.assign({}, localizer, {
      messages: getMessages(Object.assign({}, localizer.messages, messages2)),
      formatOverrides: Object.assign({}, localizer.formatOverrides, formats)
    });
  }, [messages2, formats, localizer]);
};
Localization.useLocalizer = useLocalizer;
var Localization_default = Localization;

// ../../../node_modules/react-widgets/esm/Month.js
var import_classnames4 = __toESM(require_classnames());
var import_react14 = __toESM(require_react());
var _excluded5 = ["className", "focusedItem", "disabled", "onChange", "value", "min", "max", "localizer", "renderDay"];
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function visibleDays(date2, weekStart) {
  let current = dates_default.startOf(dates_default.startOf(date2, "month"), "week", weekStart);
  let last2 = dates_default.endOf(dates_default.endOf(date2, "month"), "week", weekStart);
  let days = [];
  while (dates_default.lte(current, last2, "day")) {
    days.push(current);
    current = dates_default.add(current, 1, "day");
  }
  return days;
}
function MonthView(_ref) {
  let {
    className,
    focusedItem,
    disabled: disabled2,
    onChange,
    value,
    min: min2,
    max: max2,
    localizer,
    renderDay
  } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded5);
  let month2 = visibleDays(focusedItem, localizer.firstOfWeek());
  let rows = chunk(month2, 7);
  return import_react14.default.createElement(CalendarView_default, _extends7({}, props, {
    focusedItem,
    className: (0, import_classnames4.default)(className, "rw-calendar-month")
  }), import_react14.default.createElement("div", {
    role: "rowgroup",
    className: "rw-calendar-head"
  }, import_react14.default.createElement(CalendarView_default.Row, {
    className: "rw-calendar-row"
  }, rows[0].map((date2, idx) => import_react14.default.createElement("div", {
    role: "columnheader",
    className: "rw-head-cell",
    key: idx
  }, localizer.formatDate(date2, "weekday"))))), import_react14.default.createElement(CalendarView_default.Body, null, rows.map((row, rowIdx) => import_react14.default.createElement(CalendarView_default.Row, {
    key: rowIdx
  }, row.map((date2, colIdx) => {
    let formattedDate = localizer.formatDate(date2, "dayOfMonth");
    let label = localizer.formatDate(date2, "date");
    return import_react14.default.createElement(CalendarView_default.Cell, {
      key: colIdx,
      label,
      date: date2,
      min: min2,
      max: max2,
      unit: "day",
      viewUnit: "month",
      onChange,
      focusedItem,
      selected: value,
      disabled: disabled2
    }, renderDay ? renderDay({
      date: date2,
      label: formattedDate
    }) : formattedDate);
  })))));
}
var Month_default = MonthView;

// ../../../node_modules/react-widgets/esm/SlideTransitionGroup.js
var import_classnames5 = __toESM(require_classnames());

// ../../../node_modules/dom-helpers/esm/ownerDocument.js
function ownerDocument(node3) {
  return node3 && node3.ownerDocument || document;
}

// ../../../node_modules/dom-helpers/esm/ownerWindow.js
function ownerWindow(node3) {
  var doc = ownerDocument(node3);
  return doc && doc.defaultView || window;
}

// ../../../node_modules/dom-helpers/esm/getComputedStyle.js
function getComputedStyle2(node3, psuedoElement) {
  return ownerWindow(node3).getComputedStyle(node3, psuedoElement);
}

// ../../../node_modules/dom-helpers/esm/hyphenate.js
var rUpper = /([A-Z])/g;
function hyphenate(string4) {
  return string4.replace(rUpper, "-$1").toLowerCase();
}

// ../../../node_modules/dom-helpers/esm/hyphenateStyle.js
var msPattern = /^ms-/;
function hyphenateStyleName(string4) {
  return hyphenate(string4).replace(msPattern, "-ms-");
}

// ../../../node_modules/dom-helpers/esm/isTransform.js
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}

// ../../../node_modules/dom-helpers/esm/css.js
function style(node3, property) {
  var css = "";
  var transforms = "";
  if (typeof property === "string") {
    return node3.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle2(node3).getPropertyValue(hyphenateStyleName(property));
  }
  Object.keys(property).forEach(function(key) {
    var value = property[key];
    if (!value && value !== 0) {
      node3.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node3.style.cssText += ";" + css;
}
var css_default = style;

// ../../../node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// ../../../node_modules/dom-helpers/esm/addEventListener.js
var optionsSupported = false;
var onceSupported = false;
try {
  options = {
    get passive() {
      return optionsSupported = true;
    },
    get once() {
      return onceSupported = optionsSupported = true;
    }
  };
  if (canUseDOM_default) {
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, true);
  }
} catch (e) {
}
var options;
function addEventListener(node3, eventName, handler, options) {
  if (options && typeof options !== "boolean" && !onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node3.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
  }
  node3.addEventListener(eventName, handler, options);
}
var addEventListener_default = addEventListener;

// ../../../node_modules/dom-helpers/esm/removeEventListener.js
function removeEventListener(node3, eventName, handler, options) {
  var capture = options && typeof options !== "boolean" ? options.capture : options;
  node3.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node3.removeEventListener(eventName, handler.__once, capture);
  }
}
var removeEventListener_default = removeEventListener;

// ../../../node_modules/dom-helpers/esm/listen.js
function listen(node3, eventName, handler, options) {
  addEventListener_default(node3, eventName, handler, options);
  return function() {
    removeEventListener_default(node3, eventName, handler, options);
  };
}
var listen_default = listen;

// ../../../node_modules/dom-helpers/esm/triggerEvent.js
function triggerEvent(node3, eventName, bubbles, cancelable) {
  if (bubbles === void 0) {
    bubbles = false;
  }
  if (cancelable === void 0) {
    cancelable = true;
  }
  if (node3) {
    var event = document.createEvent("HTMLEvents");
    event.initEvent(eventName, bubbles, cancelable);
    node3.dispatchEvent(event);
  }
}

// ../../../node_modules/dom-helpers/esm/transitionEnd.js
function parseDuration(node3) {
  var str = css_default(node3, "transitionDuration") || "";
  var mult = str.indexOf("ms") === -1 ? 1e3 : 1;
  return parseFloat(str) * mult;
}
function emulateTransitionEnd(element, duration, padding) {
  if (padding === void 0) {
    padding = 5;
  }
  var called = false;
  var handle = setTimeout(function() {
    if (!called)
      triggerEvent(element, "transitionend", true);
  }, duration + padding);
  var remove = listen_default(element, "transitionend", function() {
    called = true;
  }, {
    once: true
  });
  return function() {
    clearTimeout(handle);
    remove();
  };
}
function transitionEnd(element, handler, duration, padding) {
  if (duration == null)
    duration = parseDuration(element) || 0;
  var removeEmulate = emulateTransitionEnd(element, duration, padding);
  var remove = listen_default(element, "transitionend", handler);
  return function() {
    removeEmulate();
    remove();
  };
}

// ../../../node_modules/react-widgets/esm/SlideTransitionGroup.js
var import_prop_types = __toESM(require_prop_types());
var import_react15 = __toESM(require_react());
var _excluded6 = ["direction", "children", "onTransitionEnd"];
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DirectionPropType = import_prop_types.default.oneOf(["left", "right", "top", "bottom"]);
var prefix = "rw-calendar-transition";
var active = "rw-calendar-transition-active";
var next = "rw-calendar-transition-next";
var prev = "rw-calendar-transition-prev";
var clone = (el, cls) => el && import_react15.default.cloneElement(el, {
  className: (0, import_classnames5.default)(el.props.className, prefix, cls)
});
var SlideTransitionGroup = class extends import_react15.default.Component {
  constructor(args) {
    super(args);
    this.handleTransitionEnd = (hadFocus) => {
      this.isTransitioning = false;
      let current = this.container.current.lastChild;
      if (this.props.onTransitionEnd)
        this.props.onTransitionEnd(current, hadFocus);
    };
    this.current = this.props.children;
    this.container = import_react15.default.createRef();
    this.state = {
      prevClasses: "",
      currentClasses: ""
    };
  }
  componentDidUpdate() {
    if (!this.flush || this.isTransitioning)
      return;
    this.flush = false;
    this.isTransitioning = true;
    let previous = this.container.current.firstChild;
    const hadFocus = document.activeElement && previous.contains(document.activeElement);
    this.setState({
      prevClasses: "",
      currentClasses: next
    }, () => {
      let current = this.container.current.lastChild;
      current.clientHeight;
      this.setState({
        prevClasses: prev,
        currentClasses: (0, import_classnames5.default)(next, active)
      }, () => {
        transitionEnd(current, () => {
          this.prev = null;
          if (this.current.key !== this.props.children.key) {
            this.current = this.props.children;
          }
          this.setState({
            prevClasses: "",
            currentClasses: ""
          }, () => this.handleTransitionEnd(hadFocus));
        });
      });
    });
  }
  render() {
    let _this$props = this.props, {
      direction,
      children
    } = _this$props, props = _objectWithoutPropertiesLoose7(_this$props, _excluded6);
    if (!this.isTransitioning) {
      if (this.current.key !== children.key) {
        this.prev = this.current;
        this.flush = true;
      }
      this.current = children;
    }
    let {
      prevClasses,
      currentClasses
    } = this.state;
    return import_react15.default.createElement("div", _extends8({}, props, {
      ref: this.container,
      className: (0, import_classnames5.default)(`rw-calendar-transition-group`, direction === "top" && "rw-calendar-transition-top", direction === "right" && "rw-calendar-transition-right", direction === "bottom" && "rw-calendar-transition-bottom", direction === "left" && "rw-calendar-transition-left")
    }), clone(this.prev, prevClasses), clone(this.current, currentClasses));
  }
};
SlideTransitionGroup.defaultProps = {
  direction: "left"
};
SlideTransitionGroup.propTypes = {
  direction: DirectionPropType,
  onTransitionEnd: import_prop_types.default.func
};
var SlideTransitionGroup_default = SlideTransitionGroup;

// ../../../node_modules/react-widgets/esm/Widget.js
var import_classnames6 = __toESM(require_classnames());
var import_react18 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useEventListener.js
var import_react16 = __toESM(require_react());
function useEventListener(eventTarget, event, listener, capture = false) {
  const handler = useEventCallback(listener);
  (0, import_react16.useEffect)(() => {
    const target = typeof eventTarget === "function" ? eventTarget() : eventTarget;
    target.addEventListener(event, handler, capture);
    return () => target.removeEventListener(event, handler, capture);
  }, [eventTarget]);
}

// ../../../node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react17 = __toESM(require_react());
function useGlobalListener(event, handler, capture = false) {
  const documentTarget = (0, import_react17.useCallback)(() => document, []);
  return useEventListener(documentTarget, event, handler, capture);
}

// ../../../node_modules/react-widgets/esm/Widget.js
var _excluded7 = ["className", "tabIndex", "focused", "open", "dropUp", "disabled", "readOnly", "autofilling"];
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useKeyboardNavigationCheck() {
  const [isNavigatingViaKeyboard, setIsNavigatingViaKeyboard] = (0, import_react18.useState)(false);
  useGlobalListener("keydown", ({
    key
  }) => {
    if (key == " " || key === "Tab" || key == "Enter" || key && key.indexOf("Arrow") !== -1) {
      setIsNavigatingViaKeyboard(true);
    }
  });
  useGlobalListener("mousedown", () => {
    setIsNavigatingViaKeyboard(false);
  });
  return isNavigatingViaKeyboard;
}
function useWidgetProps(props) {
  const tabIndex = props.tabIndex != null ? props.tabIndex : -1;
  const isKeyboardNavigating = useKeyboardNavigationCheck();
  return {
    tabIndex,
    "data-intent": isKeyboardNavigating ? "keyboard" : "mouse",
    className: (0, import_classnames6.default)(props.className, "rw-widget", props.disabled && "rw-state-disabled", props.readOnly && "rw-state-readonly", props.focused && "rw-state-focus", props.autofilling && "rw-webkit-autofill", props.open && `rw-open${props.dropUp ? "-up" : ""}`)
  };
}
var Widget = import_react18.default.forwardRef((_ref, ref) => {
  let {
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  } = _ref, props = _objectWithoutPropertiesLoose8(_ref, _excluded7);
  const widgetProps = useWidgetProps({
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  });
  return import_react18.default.createElement("div", _extends9({
    ref
  }, props, widgetProps));
});
Widget.displayName = "Widget";
var Widget_default = Widget;

// ../../../node_modules/react-widgets/esm/Year.js
var import_react19 = __toESM(require_react());
var _excluded8 = ["focusedItem", "disabled", "onChange", "value", "min", "localizer", "max"];
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
function monthsInYear(year2) {
  let date2 = new Date(year2, 0, 1);
  return months.map((i) => dates_default.month(date2, i));
}
function YearView(_ref) {
  let {
    focusedItem,
    disabled: disabled2,
    onChange,
    value,
    min: min2,
    localizer,
    max: max2
  } = _ref, props = _objectWithoutPropertiesLoose9(_ref, _excluded8);
  let months2 = monthsInYear(dates_default.year(focusedItem));
  return import_react19.default.createElement(CalendarView_default, _extends10({}, props, {
    focusedItem
  }), import_react19.default.createElement(CalendarView_default.Body, null, chunk(months2, 4).map((row, rowIdx) => import_react19.default.createElement(CalendarView_default.Row, {
    key: rowIdx
  }, row.map((date2, colIdx) => {
    let label = localizer.formatDate(date2, "header");
    return import_react19.default.createElement(CalendarView_default.Cell, {
      key: colIdx,
      label,
      date: date2,
      min: min2,
      max: max2,
      unit: "month",
      viewUnit: "year",
      onChange,
      focusedItem,
      selected: value,
      disabled: disabled2
    }, localizer.formatDate(date2, "month"));
  })))));
}
var Year_default = YearView;

// ../../../node_modules/react-widgets/esm/useAutoFocus.js
var import_react20 = __toESM(require_react());
function useAutoFocus(autoFocus, ref) {
  (0, import_react20.useEffect)(() => {
    if (autoFocus && ref.current)
      ref.current.focus();
  }, []);
}

// ../../../node_modules/react-widgets/esm/WidgetHelpers.js
var import_react21 = __toESM(require_react());
var idCount = 0;
function uniqueId(prefix2) {
  return "" + ((prefix2 == null ? "" : prefix2) + ++idCount);
}
function notify(handler, args) {
  if (handler)
    handler.apply(null, args);
}
var useInstanceId = (otherId, suffix = "") => {
  const id = (0, import_react21.useRef)();
  if (!id.current)
    id.current = uniqueId("rw_");
  return (otherId || id.current) + suffix;
};
function useFirstFocusedRender(focused, open) {
  const ref = (0, import_react21.useRef)(false);
  return ref.current || (focused || !!open) && (ref.current = true);
}

// ../../../node_modules/react-widgets/esm/Calendar.js
var _excluded9 = ["id", "autoFocus", "bordered", "views", "tabIndex", "disabled", "readOnly", "className", "value", "defaultValue", "onChange", "currentDate", "defaultCurrentDate", "onCurrentDateChange", "min", "max", "view", "defaultView", "onViewChange", "onKeyDown", "onNavigate", "renderDay", "messages", "formats"];
function _extends11() {
  _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var last = (a) => a[a.length - 1];
var CELL_CLASSNAME = "rw-cell";
var FOCUSED_CELL_SELECTOR = `.${CELL_CLASSNAME}[tabindex]`;
var MIN = new Date(1900, 0, 1);
var MAX = new Date(2099, 11, 31);
var VIEW_OPTIONS = ["month", "year", "decade", "century"];
var VIEW_UNIT = {
  month: "day",
  year: "month",
  decade: "year",
  century: "decade"
};
var VIEW = {
  month: Month_default,
  year: Year_default,
  decade: Decade_default,
  century: Century_default
};
var ARROWS_TO_DIRECTION = {
  ArrowDown: "DOWN",
  ArrowUp: "UP",
  ArrowRight: "RIGHT",
  ArrowLeft: "LEFT"
};
var OPPOSITE_DIRECTION = {
  LEFT: "RIGHT",
  RIGHT: "LEFT"
};
var MULTIPLIER = {
  year: 1,
  decade: 10,
  century: 100
};
function inRangeValue(_value, min2, max2) {
  let value = dateOrNull(_value);
  if (value === null)
    return value;
  return dates_default.max(dates_default.min(value, max2), min2);
}
var propTypes = {
  /**
   * @example ['disabled', ['new Date()']]
   */
  disabled: import_prop_types2.default.bool,
  /**
   * @example ['readOnly', ['new Date()']]
   */
  readOnly: import_prop_types2.default.bool,
  /**
   * @example ['onChangePicker', [ ['new Date()'] ]]
   */
  onChange: import_prop_types2.default.func,
  /**
   * The selected Date.
   *
   * ```tsx live
   * import { Calendar } from 'react-widgets';
   *
   * <Calendar value={new Date()} />
   * ```
   * @example false
   */
  value: import_prop_types2.default.instanceOf(Date),
  /**
   * The minimum date that the Calendar can navigate from.
   *
   * @example ['prop', ['min', 'new Date()']]
   */
  min: import_prop_types2.default.instanceOf(Date),
  /**
   * The maximum date that the Calendar can navigate to.
   *
   * @example ['prop', ['max', 'new Date()']]
   */
  max: import_prop_types2.default.instanceOf(Date),
  /**
   * Default current date at which the calendar opens. If none is provided, opens at today's date or the `value` date (if any).
   */
  currentDate: import_prop_types2.default.instanceOf(Date),
  /**
   * Change event Handler that is called when the currentDate is changed. The handler is called with the currentDate object.
   */
  onCurrentDateChange: import_prop_types2.default.func,
  /** Specify the navigate into the past header icon */
  navigatePrevIcon: import_prop_types2.default.node,
  /** Specify the navigate into the future header icon */
  navigateNextIcon: import_prop_types2.default.node,
  /**
   * Controls the currently displayed calendar view. Use `defaultView` to set a unique starting view.
   *
   * @type {("month"|"year"|"decade"|"century")}
   * @controllable onViewChange
   */
  view(props, ...args) {
    return import_prop_types2.default.oneOf(props.views || VIEW_OPTIONS)(props, ...args);
  },
  /**
   * Defines a list of views the Calendar can traverse through, starting with the
   * first in the list to the last.
   *
   * @type array<"month"|"year"|"decade"|"century">
   */
  views: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(VIEW_OPTIONS)),
  /**
   * A callback fired when the `view` changes.
   *
   * @controllable view
   */
  onViewChange: import_prop_types2.default.func,
  /**
   * Callback fired when the Calendar navigates between views, or forward and backwards in time.
   *
   * @type function(date: ?Date, direction: string, view: string)
   */
  onNavigate: import_prop_types2.default.func,
  culture: import_prop_types2.default.string,
  autoFocus: import_prop_types2.default.bool,
  /**
   * Show or hide the Calendar footer.
   *
   * @example ['prop', ['footer', true]]
   */
  footer: import_prop_types2.default.bool,
  /**
   * Provide a custom component to render the days of the month. The Component is provided the following props
   *
   * - `date`: a `Date` object for the day of the month to render
   * - `label`: a formatted `string` of the date to render. To adjust the format of the `label` string use the `dateFormat` prop, listed below.
   */
  renderDay: import_prop_types2.default.func,
  formats: import_prop_types2.default.shape({
    /**
     * A formatter for the header button of the month view.
     *
     * @example ['dateFormat', ['headerFormat', "{ date: 'medium' }"]]
     */
    header: import_prop_types2.default.any,
    /**
     * A formatter for the Calendar footer, formats today's Date as a string.
     *
     * @example ['dateFormat', ['footerFormat', "{ date: 'medium' }", "date => 'Today is: ' + formatter(date)"]]
     */
    footer: import_prop_types2.default.any,
    /**
     * A formatter calendar days of the week, the default formats each day as a Narrow name: "Mo", "Tu", etc.
     *
     * @example ['prop', { day: "day => \n['🎉', 'M', 'T','W','Th', 'F', '🎉'][day.getDay()]" }]
     */
    day: import_prop_types2.default.any,
    /**
     * A formatter for day of the month
     *
     * @example ['prop', { date: "dt => String(dt.getDate())" }]
     */
    date: import_prop_types2.default.any,
    /**
     * A formatter for month name.
     *
     * @example ['dateFormat', ['monthFormat', "{ raw: 'MMMM' }", null, { defaultView: '"year"' }]]
     */
    month: import_prop_types2.default.any,
    /**
     * A formatter for month name.
     *
     * @example ['dateFormat', ['yearFormat', "{ raw: 'yy' }", null, { defaultView: '"decade"' }]]
     */
    year: import_prop_types2.default.any,
    /**
     * A formatter for decade, the default formats the first and last year of the decade like: 2000 - 2009.
     */
    decade: import_prop_types2.default.any,
    /**
     * A formatter for century, the default formats the first and last year of the century like: 1900 - 1999.
     */
    century: import_prop_types2.default.any
  }),
  messages: import_prop_types2.default.shape({
    moveBack: import_prop_types2.default.string,
    moveForward: import_prop_types2.default.string
  }),
  onKeyDown: import_prop_types2.default.func,
  /** @ignore */
  tabIndex: import_prop_types2.default.any
};
var useViewState = (views, view = views[0], currentDate) => {
  const lastView = (0, import_react22.useRef)(view);
  const lastDate = (0, import_react22.useRef)(currentDate);
  let slideDirection;
  if (view !== lastView.current) {
    slideDirection = views.indexOf(lastView.current) > views.indexOf(view) ? "top" : "bottom";
  } else if (lastDate.current !== currentDate) {
    slideDirection = dates_default.gt(currentDate, lastDate.current) ? "left" : "right";
  }
  (0, import_react22.useEffect)(() => {
    lastDate.current = currentDate;
    lastView.current = view;
  });
  return slideDirection;
};
function Calendar(_ref) {
  let {
    id,
    autoFocus,
    bordered = true,
    views = VIEW_OPTIONS,
    tabIndex = 0,
    disabled: disabled2,
    readOnly,
    className,
    value,
    defaultValue,
    onChange,
    currentDate: pCurrentDate,
    defaultCurrentDate,
    onCurrentDateChange,
    min: min2 = MIN,
    max: max2 = MAX,
    view,
    defaultView = views[0],
    onViewChange,
    onKeyDown,
    onNavigate,
    renderDay,
    messages: messages2,
    formats
  } = _ref, elementProps = _objectWithoutPropertiesLoose10(_ref, _excluded9);
  const [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentDate, handleCurrentDateChange] = useUncontrolledProp(pCurrentDate, defaultCurrentDate || currentValue || /* @__PURE__ */ new Date(), onCurrentDateChange);
  const [currentView, handleViewChange] = useUncontrolledProp(view, defaultView, onViewChange);
  const localizer = useLocalizer(messages2, formats);
  const ref = (0, import_react22.useRef)(null);
  const viewId = useInstanceId(id, "_calendar");
  const labelId = useInstanceId(id, "_calendar_label");
  useAutoFocus(!!autoFocus, ref);
  const slideDirection = useViewState(views, currentView, currentDate);
  const [, focused] = useFocusManager2(ref, {
    disabled: disabled2
  }, {
    willHandle() {
      if (tabIndex == -1)
        return false;
    }
  });
  const lastValue = (0, import_react22.useRef)(currentValue);
  (0, import_react22.useEffect)(() => {
    const inValue = inRangeValue(currentValue, min2, max2);
    const last2 = lastValue.current;
    lastValue.current = currentValue;
    if (!dates_default.eq(inValue, dateOrNull(last2), VIEW_UNIT[currentView]))
      maybeSetCurrentDate(inValue);
  });
  const isDisabled = disabled2 || readOnly;
  const handleViewChangeImpl = () => {
    navigate("UP");
  };
  const handleMoveBack = () => {
    navigate("LEFT");
  };
  const handleMoveForward = () => {
    navigate("RIGHT");
  };
  const handleDateChange = (date2) => {
    if (views[0] === currentView) {
      maybeSetCurrentDate(date2);
      notify(handleChange, [date2]);
      focus();
      return;
    }
    navigate("DOWN", date2);
  };
  const handleMoveToday = () => {
    let date2 = /* @__PURE__ */ new Date();
    let firstView = views[0];
    notify(onChange, [date2]);
    if (dates_default.inRange(date2, min2, max2, firstView)) {
      focus();
      maybeSetCurrentDate(date2);
      notify(handleViewChange, [firstView]);
    }
  };
  const handleKeyDown = (e) => {
    let ctrl = e.ctrlKey || e.metaKey;
    let key2 = e.key;
    let direction = ARROWS_TO_DIRECTION[key2];
    let unit = VIEW_UNIT[currentView];
    if (key2 === "Enter") {
      e.preventDefault();
      return handleDateChange(currentDate);
    }
    if (direction) {
      if (ctrl) {
        e.preventDefault();
        navigate(direction);
      } else {
        const isRTL = getComputedStyle(e.currentTarget).getPropertyValue("direction") === "rtl";
        if (isRTL && direction in OPPOSITE_DIRECTION)
          direction = OPPOSITE_DIRECTION[direction];
        let nextDate2 = Calendar.move(currentDate, min2, max2, currentView, direction);
        if (!dates_default.eq(currentDate, nextDate2, unit)) {
          e.preventDefault();
          if (dates_default.gt(nextDate2, currentDate, currentView))
            navigate("RIGHT", nextDate2);
          else if (dates_default.lt(nextDate2, currentDate, currentView))
            navigate("LEFT", nextDate2);
          else
            maybeSetCurrentDate(nextDate2);
        }
      }
    }
    notify(onKeyDown, [e]);
  };
  function navigate(direction, date2) {
    let nextView = currentView;
    let slideDir = direction === "LEFT" || direction === "UP" ? "right" : "left";
    if (direction === "UP")
      nextView = views[views.indexOf(currentView) + 1] || nextView;
    if (direction === "DOWN")
      nextView = views[views.indexOf(currentView) - 1] || nextView;
    if (!date2)
      date2 = ["LEFT", "RIGHT"].indexOf(direction) !== -1 ? nextDate(direction) : currentDate;
    if (dates_default.inRange(date2, min2, max2, nextView)) {
      notify(onNavigate, [date2, slideDir, nextView]);
      maybeSetCurrentDate(date2);
      notify(handleViewChange, [nextView]);
    }
  }
  const focus = () => {
    var _ref$current;
    const node3 = (_ref$current = ref.current) == null ? void 0 : _ref$current.querySelector(FOCUSED_CELL_SELECTOR);
    node3 == null ? void 0 : node3.focus();
  };
  const moveFocus = (node3, hadFocus) => {
    let current = document.activeElement;
    if (hadFocus && (!current || !node3.contains(current))) {
      node3.focus();
    }
  };
  function maybeSetCurrentDate(date2) {
    let inRangeDate = inRangeValue(date2 ? new Date(date2) : currentDate, min2, max2);
    if (date2 === currentDate || dates_default.eq(inRangeDate, dateOrNull(currentDate), VIEW_UNIT[currentView]))
      return;
    notify(handleCurrentDateChange, [inRangeDate]);
  }
  function nextDate(direction) {
    let method = direction === "LEFT" ? "subtract" : "add";
    let unit = currentView === "month" ? currentView : "year";
    let multi = MULTIPLIER[currentView] || 1;
    return dates_default[method](currentDate, 1 * multi, unit);
  }
  function getHeaderLabel() {
    switch (currentView) {
      case "month":
        return localizer.formatDate(currentDate, "header");
      case "year":
        return localizer.formatDate(currentDate, "year");
      case "decade":
        return localizer.formatDate(dates_default.startOf(currentDate, "decade"), "decade");
      case "century":
        return localizer.formatDate(dates_default.startOf(currentDate, "century"), "century");
    }
  }
  let View = VIEW[currentView];
  let todayNotInRange = !dates_default.inRange(/* @__PURE__ */ new Date(), min2, max2, currentView);
  let key = currentView + "_" + dates_default[currentView](currentDate);
  const prevDisabled = isDisabled || !dates_default.inRange(nextDate("LEFT"), min2, max2, currentView);
  const nextDisabled = isDisabled || !dates_default.inRange(nextDate("RIGHT"), min2, max2, currentView);
  return import_react22.default.createElement(Widget_default, _extends11({}, elementProps, {
    role: "group",
    ref,
    focused,
    disabled: disabled2,
    readOnly,
    tabIndex,
    className: (0, import_classnames7.default)(className, "rw-calendar", bordered && "rw-calendar-contained")
  }), import_react22.default.createElement(CalendarHeader_default, {
    label: getHeaderLabel(),
    labelId,
    localizer,
    upDisabled: isDisabled || currentView === last(views),
    prevDisabled,
    todayDisabled: isDisabled || todayNotInRange,
    nextDisabled,
    onViewChange: handleViewChangeImpl,
    onMoveLeft: handleMoveBack,
    onMoveRight: handleMoveForward,
    onMoveToday: handleMoveToday
  }), import_react22.default.createElement(Calendar.Transition, {
    direction: slideDirection,
    onTransitionEnd: moveFocus
  }, import_react22.default.createElement(View, {
    key,
    min: min2,
    max: max2,
    id: viewId,
    value: currentValue,
    localizer,
    disabled: isDisabled,
    focusedItem: currentDate,
    onChange: handleDateChange,
    onKeyDown: handleKeyDown,
    "aria-labelledby": labelId,
    renderDay
  })));
}
function dateOrNull(dt) {
  if (dt && !isNaN(dt.getTime()))
    return dt;
  return null;
}
Calendar.displayName = "Calendar";
Calendar.propTypes = propTypes;
Calendar.Transition = SlideTransitionGroup_default;
Calendar.move = (date2, min2, max2, view, direction) => {
  let isMonth = view === "month";
  let isUpOrDown = direction === "UP" || direction === "DOWN";
  let rangeUnit = view && VIEW_UNIT[view];
  let addUnit = isMonth && isUpOrDown ? "week" : VIEW_UNIT[view];
  let amount = isMonth || !isUpOrDown ? 1 : 4;
  let newDate;
  if (direction === "UP" || direction === "LEFT")
    amount *= -1;
  newDate = dates_default.add(date2, amount, addUnit);
  return dates_default.inRange(newDate, min2, max2, rangeUnit) ? newDate : date2;
};
var Calendar_default = Calendar;

// ../../../node_modules/react-widgets/esm/Combobox.js
var import_classnames16 = __toESM(require_classnames());
var PropTypes11 = __toESM(require_prop_types());
var React27 = __toESM(require_react());
var import_react45 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/Input.js
var import_classnames8 = __toESM(require_classnames());
var import_prop_types3 = __toESM(require_prop_types());
var import_react23 = __toESM(require_react());
var _excluded10 = ["className", "disabled", "readOnly", "value", "tabIndex", "type", "component"];
function _extends12() {
  _extends12 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Input = import_react23.default.forwardRef((_ref, ref) => {
  let {
    className,
    disabled: disabled2,
    readOnly,
    value,
    tabIndex,
    type = "text",
    component: Component = "input"
  } = _ref, props = _objectWithoutPropertiesLoose11(_ref, _excluded10);
  return import_react23.default.createElement(Component, _extends12({}, props, {
    ref,
    type,
    tabIndex: tabIndex || 0,
    autoComplete: "off",
    disabled: disabled2,
    readOnly,
    "aria-disabled": disabled2,
    "aria-readonly": readOnly,
    value: value == null ? "" : value,
    className: (0, import_classnames8.default)(className, "rw-input")
  }));
});
Input.displayName = "Input";
Input.propTypes = {
  disabled: import_prop_types3.default.bool,
  readOnly: import_prop_types3.default.bool,
  value: import_prop_types3.default.string,
  type: import_prop_types3.default.string,
  tabIndex: import_prop_types3.default.number,
  component: import_prop_types3.default.any
};
var Input_default = Input;

// ../../../node_modules/react-widgets/esm/List.js
var import_classnames11 = __toESM(require_classnames());
var import_prop_types6 = __toESM(require_prop_types());
var import_react35 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/ListOption.js
var import_classnames9 = __toESM(require_classnames());
var import_prop_types4 = __toESM(require_prop_types());
var import_react25 = __toESM(require_react());

// ../../../node_modules/dom-helpers/esm/querySelectorAll.js
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}

// ../../../node_modules/react-widgets/esm/FocusListContext.js
var import_react24 = __toESM(require_react());
var FocusListContext = import_react24.default.createContext(null);
var defaultOpts = {
  behavior: "stop"
};
function useListOption(dataItem2) {
  const ctx = (0, import_react24.useContext)(FocusListContext);
  const prevElement = (0, import_react24.useRef)(null);
  const ref = (0, import_react24.useRef)(null);
  (0, import_react24.useLayoutEffect)(() => () => {
    ctx == null ? void 0 : ctx.map.delete(ref.current);
  }, []);
  (0, import_react24.useLayoutEffect)(() => {
    if (prevElement.current !== ref.current) {
      ctx == null ? void 0 : ctx.map.delete(prevElement.current);
    }
    prevElement.current = ref.current;
    if (ref.current && (ctx == null ? void 0 : ctx.map.get(ref.current)) !== dataItem2) {
      ctx == null ? void 0 : ctx.map.set(ref.current, dataItem2);
    }
  });
  const focused = dataItem2 === (ctx == null ? void 0 : ctx.focusedItem);
  return [ref, focused, focused ? ctx == null ? void 0 : ctx.activeId : void 0];
}
var useFocusList = ({
  scope: listRef,
  anchorItem,
  focusFirstItem: _focusFirstItem = false,
  scopeSelector: _scopeSelector = "",
  activeId
}) => {
  const map = (0, import_react24.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  const [focusedItem, setFocusedItem] = (0, import_react24.useState)();
  const itemSelector = `${_scopeSelector} [data-rw-focusable]`.trim();
  const get = () => {
    const items = qsa(listRef.current, itemSelector);
    return [items, items.find((e) => e.dataset.rwFocused === "")];
  };
  const list = (0, import_react24.useMemo)(() => {
    return {
      size() {
        const [items] = get();
        return items.length;
      },
      get,
      toDataItem: (el) => map.get(el),
      first() {
        const [[first]] = get();
        return first;
      },
      focus(el) {
        if (!el || map.has(el))
          setFocusedItem(el ? map.get(el) : void 0);
      },
      last() {
        const [items] = get();
        return items[items.length - 1];
      },
      next({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = items.indexOf(focusedItem2) + 1;
        if (nextIdx >= items.length) {
          if (behavior === "loop")
            return items[0];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      },
      prev({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = Math.max(0, items.indexOf(focusedItem2)) - 1;
        if (nextIdx < 0) {
          if (behavior === "loop")
            return items[items.length - 1];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      }
    };
  }, []);
  (0, import_react24.useLayoutEffect)(() => {
    if (!anchorItem) {
      list.focus(null);
      return;
    }
    const element = get()[0].find((el) => list.toDataItem(el) === anchorItem);
    list.focus(element);
  }, [anchorItem]);
  (0, import_react24.useLayoutEffect)(() => {
    if (!listRef.current)
      return;
    const [, focusedElement] = get();
    const hasItem = focusedElement != null;
    if (!hasItem && _focusFirstItem || hasItem && !listRef.current.contains(focusedElement)) {
      if (_focusFirstItem)
        list.focus(list.first());
      else
        list.focus(null);
    }
  });
  const context = (0, import_react24.useMemo)(() => ({
    map,
    focusedItem,
    activeId
  }), [focusedItem, activeId]);
  list.context = context;
  list.getFocused = (0, import_react24.useCallback)(() => focusedItem, [focusedItem]);
  list.hasFocused = () => focusedItem !== void 0;
  return list;
};

// ../../../node_modules/react-widgets/esm/ListOption.js
var _excluded11 = ["className", "children", "dataItem", "selected", "disabled", "onSelect", "searchTerm"];
function _extends13() {
  _extends13 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
function _objectWithoutPropertiesLoose12(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes2 = {
  activeId: import_prop_types4.default.string,
  dataItem: import_prop_types4.default.any,
  selected: import_prop_types4.default.bool.isRequired,
  onSelect: import_prop_types4.default.func.isRequired,
  component: import_prop_types4.default.any
};
function ListOption(_ref) {
  let {
    className,
    children,
    dataItem: dataItem2,
    selected,
    disabled: disabled2,
    onSelect
  } = _ref, props = _objectWithoutPropertiesLoose12(_ref, _excluded11);
  const [ref, focused, id] = useListOption(dataItem2);
  const handleSelect = (event) => {
    if (onSelect && !disabled2)
      onSelect(dataItem2, event);
  };
  let classes = {
    "rw-state-focus": focused,
    "rw-state-selected": selected,
    "rw-state-disabled": disabled2
  };
  return import_react25.default.createElement("div", _extends13({
    id,
    ref,
    role: "option",
    "data-rw-option": "",
    "data-rw-focused": focused ? "" : void 0,
    "data-rw-focusable": !disabled2 ? "" : void 0,
    tabIndex: -1,
    "aria-selected": !!selected,
    className: (0, import_classnames9.default)("rw-list-option", className, classes),
    onClick: handleSelect
  }, props), children);
}
ListOption.propTypes = propTypes2;
var ListOption_default = ListOption;

// ../../../node_modules/react-widgets/esm/ListOptionGroup.js
var import_classnames10 = __toESM(require_classnames());
var import_prop_types5 = __toESM(require_prop_types());
var import_react26 = __toESM(require_react());
var propTypes3 = {
  className: import_prop_types5.default.string,
  component: import_prop_types5.default.string
};
function ListOptionGroup({
  children,
  className,
  component = "div"
}) {
  let Tag = component;
  return import_react26.default.createElement(Tag, {
    tabIndex: "-1",
    role: "separator",
    className: (0, import_classnames10.default)(className, "rw-list-optgroup")
  }, children);
}
ListOptionGroup.propTypes = propTypes3;
var ListOptionGroup_default = ListOptionGroup;

// ../../../node_modules/react-widgets/esm/PropTypes.js
var PropTypes6 = __toESM(require_prop_types());
var elementType2 = PropTypes6.elementType;
var disabled = Object.assign((...args) => PropTypes6.bool(...args), {
  acceptsArray: PropTypes6.oneOfType([PropTypes6.bool, PropTypes6.array])
});
var accessor = PropTypes6.oneOfType([PropTypes6.string, PropTypes6.func]);
var message = PropTypes6.oneOfType([PropTypes6.node, PropTypes6.string, PropTypes6.func]);

// ../../../node_modules/@restart/hooks/esm/useCustomEffect.js
var import_react27 = __toESM(require_react());
function useCustomEffect(effect, dependencies, isEqualOrOptions) {
  const isMounted = useMounted();
  const {
    isEqual: isEqual2,
    effectHook = import_react27.useEffect
  } = typeof isEqualOrOptions === "function" ? {
    isEqual: isEqualOrOptions
  } : isEqualOrOptions;
  const dependenciesRef = (0, import_react27.useRef)();
  dependenciesRef.current = dependencies;
  const cleanupRef = (0, import_react27.useRef)(null);
  effectHook(() => {
    if (cleanupRef.current === null) {
      const cleanup = effect();
      cleanupRef.current = () => {
        if (isMounted() && isEqual2(dependenciesRef.current, dependencies)) {
          return;
        }
        cleanupRef.current = null;
        if (cleanup)
          cleanup();
      };
    }
    return cleanupRef.current;
  });
  (0, import_react27.useDebugValue)(effect);
}
var useCustomEffect_default = useCustomEffect;

// ../../../node_modules/dequal/dist/index.mjs
var has2 = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar))
      return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has2.call(foo, ctor) && ++len && !has2.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// ../../../node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
var import_react31 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useStableMemo.js
var import_react28 = __toESM(require_react());
function isEqual(a, b) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
function useStableMemo(factory, deps) {
  let isValid3 = true;
  const valueRef = (0, import_react28.useRef)();
  if (!valueRef.current) {
    valueRef.current = {
      deps,
      result: factory()
    };
  } else {
    isValid3 = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));
  }
  const cache = isValid3 ? valueRef.current : {
    deps,
    result: factory()
  };
  valueRef.current = cache;
  return cache.result;
}

// ../../../node_modules/@restart/hooks/esm/useUpdatedRef.js
var import_react29 = __toESM(require_react());
function useUpdatedRef(value) {
  const valueRef = (0, import_react29.useRef)(value);
  valueRef.current = value;
  return valueRef;
}

// ../../../node_modules/@restart/hooks/esm/useWillUnmount.js
var import_react30 = __toESM(require_react());
function useWillUnmount(fn) {
  const onUnmount = useUpdatedRef(fn);
  (0, import_react30.useEffect)(() => () => onUnmount.current(), []);
}

// ../../../node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
function useUpdateImmediateEffect(effect, deps) {
  const firstRef = (0, import_react31.useRef)(true);
  const tearDown = (0, import_react31.useRef)();
  useWillUnmount(() => {
    if (tearDown.current)
      tearDown.current();
  });
  useStableMemo(() => {
    if (firstRef.current) {
      firstRef.current = false;
      return;
    }
    if (tearDown.current)
      tearDown.current();
    tearDown.current = effect();
  }, deps);
}
var useUpdateImmediateEffect_default = useUpdateImmediateEffect;

// ../../../node_modules/@restart/hooks/esm/useImmediateUpdateEffect.js
var useImmediateUpdateEffect_default = useUpdateImmediateEffect_default;

// ../../../node_modules/@restart/hooks/esm/useMutationObserver.js
var import_react32 = __toESM(require_react());
function isDepsEqual([nextElement, nextConfig], [prevElement, prevConfig]) {
  return nextElement === prevElement && dequal(nextConfig, prevConfig);
}
function useMutationObserver(element, config, callback) {
  const [records, setRecords] = (0, import_react32.useState)(null);
  const handler = useEventCallback(callback || setRecords);
  useCustomEffect_default(() => {
    if (!element)
      return;
    const observer = new MutationObserver(handler);
    observer.observe(element, config);
    return () => {
      observer.disconnect();
    };
  }, [element, config], {
    isEqual: isDepsEqual,
    // Intentionally done in render, otherwise observer will miss any
    // changes made to the DOM during this update
    effectHook: useImmediateUpdateEffect_default
  });
  return callback ? void 0 : records || [];
}
var useMutationObserver_default = useMutationObserver;

// ../../../node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react33 = __toESM(require_react());
function useCallbackRef() {
  return (0, import_react33.useState)(null);
}

// ../../../node_modules/@restart/hooks/esm/useMergedRefs.js
var import_react34 = __toESM(require_react());
var toFnRef = (ref) => !ref || typeof ref === "function" ? ref : (value) => {
  ref.current = value;
};
function mergeRefs(refA, refB) {
  const a = toFnRef(refA);
  const b = toFnRef(refB);
  return (value) => {
    if (a)
      a(value);
    if (b)
      b(value);
  };
}
function useMergedRefs(refA, refB) {
  return (0, import_react34.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
}
var useMergedRefs_default = useMergedRefs;

// ../../../node_modules/react-widgets/esm/List.js
var _excluded12 = ["multiple", "data", "value", "onChange", "accessors", "className", "messages", "disabled", "renderItem", "renderGroup", "searchTerm", "groupBy", "elementRef", "optionComponent", "renderList"];
function _objectWithoutPropertiesLoose13(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var whitelist = ["style", "className", "role", "id", "autocomplete", "size", "tabIndex", "maxLength", "name"];
var whitelistRegex = [/^aria-/, /^data-/, /^on[A-Z]\w+/];
function pickElementProps(props) {
  const result = {};
  Object.keys(props).forEach((key) => {
    if (whitelist.indexOf(key) !== -1 || whitelistRegex.some((r) => !!key.match(r)))
      result[key] = props[key];
  });
  return result;
}
var propTypes4 = {
  data: import_prop_types6.default.array,
  dataKey: accessor,
  textField: accessor,
  onSelect: import_prop_types6.default.func,
  onMove: import_prop_types6.default.func,
  onHoverOption: import_prop_types6.default.func,
  optionComponent: import_prop_types6.default.elementType,
  renderItem: import_prop_types6.default.func,
  renderGroup: import_prop_types6.default.func,
  focusedItem: import_prop_types6.default.any,
  selectedItem: import_prop_types6.default.any,
  searchTerm: import_prop_types6.default.string,
  disabled: disabled.acceptsArray,
  messages: import_prop_types6.default.shape({
    emptyList: import_prop_types6.default.func.isRequired
  })
};
var useScrollFocusedIntoView = (element, observeChanges = false) => {
  const scrollIntoView = (0, import_react35.useCallback)(() => {
    if (!element)
      return;
    let selectedItem = element.querySelector("[data-rw-focused]");
    if (selectedItem && selectedItem.scrollIntoView) {
      selectedItem.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  }, [element]);
  useMutationObserver_default(observeChanges ? element : null, {
    subtree: true,
    attributes: true,
    attributeFilter: ["data-rw-focused"]
  }, scrollIntoView);
  return scrollIntoView;
};
function useHandleSelect(multiple, dataItems, onChange) {
  return (dataItem2, event) => {
    if (multiple === false) {
      onChange(dataItem2, {
        dataItem: dataItem2,
        lastValue: dataItems[0],
        originalEvent: event
      });
      return;
    }
    const checked = dataItems.includes(dataItem2);
    onChange(checked ? dataItems.filter((d) => d !== dataItem2) : [...dataItems, dataItem2], {
      dataItem: dataItem2,
      lastValue: dataItems,
      action: checked ? "remove" : "insert",
      originalEvent: event
    });
  };
}
var List = import_react35.default.forwardRef(function List2(_ref, outerRef) {
  var _elementProps$role;
  let {
    multiple = false,
    data = [],
    value,
    onChange,
    accessors,
    className,
    messages: messages2,
    disabled: disabled2,
    renderItem,
    renderGroup,
    searchTerm,
    groupBy,
    elementRef,
    optionComponent: Option = ListOption_default,
    renderList
  } = _ref, props = _objectWithoutPropertiesLoose13(_ref, _excluded12);
  const id = useInstanceId();
  const dataItems = makeArray(value, multiple);
  const groupedData = (0, import_react35.useMemo)(() => groupBy ? groupBySortedKeys(groupBy, data) : void 0, [data, groupBy]);
  const [element, ref] = useCallbackRef();
  const disabledItems = toItemArray(disabled2);
  const {
    emptyList
  } = useMessagesWithDefaults(messages2);
  const divRef = useMergedRefs_default(ref, elementRef);
  const handleSelect = useHandleSelect(multiple, dataItems, onChange);
  const scrollIntoView = useScrollFocusedIntoView(element, true);
  let elementProps = pickElementProps(props);
  (0, import_react35.useImperativeHandle)(outerRef, () => ({
    scrollIntoView
  }), [scrollIntoView]);
  function renderOption(item, idx) {
    const textValue = accessors.text(item);
    const itemIsDisabled = disabledItems.includes(item);
    const itemIsSelected = dataItems.includes(item);
    return import_react35.default.createElement(Option, {
      dataItem: item,
      key: `item_${idx}`,
      searchTerm,
      onSelect: handleSelect,
      disabled: itemIsDisabled,
      selected: itemIsSelected
    }, renderItem ? renderItem({
      item,
      searchTerm,
      index: idx,
      text: textValue,
      // TODO: probably remove
      value: accessors.value(item),
      disabled: itemIsDisabled
    }) : textValue);
  }
  const items = groupedData ? groupedData.map(([group, items2], idx) => import_react35.default.createElement("div", {
    role: "group",
    key: `group_${idx}`
  }, import_react35.default.createElement(ListOptionGroup_default, null, renderGroup ? renderGroup({
    group
  }) : group), items2.map(renderOption))) : data.map(renderOption);
  const rootProps = Object.assign({
    id,
    tabIndex: 0,
    ref: divRef
  }, elementProps, {
    "aria-multiselectable": !!multiple,
    className: (0, import_classnames11.default)(className, "rw-list"),
    role: (_elementProps$role = elementProps.role) != null ? _elementProps$role : "listbox",
    children: import_react35.default.Children.count(items) ? items : import_react35.default.createElement("div", {
      className: "rw-list-empty"
    }, emptyList())
  });
  return renderList ? renderList(rootProps) : import_react35.default.createElement("div", rootProps);
});
List.displayName = "List";
List.propTypes = propTypes4;
var List_default = List;

// ../../../node_modules/react-widgets/esm/Popup.js
var import_classnames13 = __toESM(require_classnames());
var import_react39 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/SlideDownTransition.js
var import_classnames12 = __toESM(require_classnames());

// ../../../node_modules/dom-helpers/esm/isDocument.js
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}

// ../../../node_modules/dom-helpers/esm/isWindow.js
function isWindow(node3) {
  if ("window" in node3 && node3.window === node3)
    return node3;
  if (isDocument(node3))
    return node3.defaultView || false;
  return false;
}

// ../../../node_modules/dom-helpers/esm/contains.js
function contains(context, node3) {
  if (context.contains)
    return context.contains(node3);
  if (context.compareDocumentPosition)
    return context === node3 || !!(context.compareDocumentPosition(node3) & 16);
}

// ../../../node_modules/dom-helpers/esm/getScrollAccessor.js
function getscrollAccessor(offset2) {
  var prop = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
  function scrollAccessor(node3, val) {
    var win = isWindow(node3);
    if (val === void 0) {
      return win ? win[offset2] : node3[prop];
    }
    if (win) {
      win.scrollTo(win[offset2], val);
    } else {
      node3[prop] = val;
    }
  }
  return scrollAccessor;
}

// ../../../node_modules/dom-helpers/esm/scrollLeft.js
var scrollLeft_default = getscrollAccessor("pageXOffset");

// ../../../node_modules/dom-helpers/esm/scrollTop.js
var scrollTop_default = getscrollAccessor("pageYOffset");

// ../../../node_modules/dom-helpers/esm/offset.js
function offset(node3) {
  var doc = ownerDocument(node3);
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  var docElem = doc && doc.documentElement;
  if (!docElem || !contains(docElem, node3))
    return box;
  if (node3.getBoundingClientRect !== void 0)
    box = node3.getBoundingClientRect();
  box = {
    top: box.top + scrollTop_default(docElem) - (docElem.clientTop || 0),
    left: box.left + scrollLeft_default(docElem) - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}

// ../../../node_modules/dom-helpers/esm/height.js
function height(node3, client) {
  var win = isWindow(node3);
  return win ? win.innerHeight : client ? node3.clientHeight : offset(node3).height;
}

// ../../../node_modules/react-widgets/esm/SlideDownTransition.js
var import_prop_types9 = __toESM(require_prop_types());
var import_react38 = __toESM(require_react());

// ../../../node_modules/react-transition-group/esm/Transition.js
var import_prop_types8 = __toESM(require_prop_types());
var import_react37 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// ../../../node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// ../../../node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types7 = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
  enter: import_prop_types7.default.number,
  exit: import_prop_types7.default.number,
  appear: import_prop_types7.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.shape({
  enter: import_prop_types7.default.string,
  exit: import_prop_types7.default.string,
  active: import_prop_types7.default.string
}), import_prop_types7.default.shape({
  enter: import_prop_types7.default.string,
  enterDone: import_prop_types7.default.string,
  enterActive: import_prop_types7.default.string,
  exit: import_prop_types7.default.string,
  exitDone: import_prop_types7.default.string,
  exitActive: import_prop_types7.default.string
})]) : null;

// ../../../node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react36 = __toESM(require_react());
var TransitionGroupContext_default = import_react36.default.createContext(null);

// ../../../node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node3) {
  return node3.scrollTop;
};

// ../../../node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node3 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node3)
            forceReflow(node3);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active2 = true;
    this.nextCallback = function(event) {
      if (active2) {
        active2 = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active2 = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node3 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node3 || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node3, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react37.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react37.default.cloneElement(import_react37.default.Children.only(children), childProps))
    );
  };
  return Transition2;
}(import_react37.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types8.default.shape({
    current: typeof Element === "undefined" ? import_prop_types8.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types8.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types8.default.oneOfType([import_prop_types8.default.func.isRequired, import_prop_types8.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types8.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types8.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types8.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types8.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types8.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types8.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener)
      pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types8.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types8.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types8.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types8.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types8.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types8.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types8.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// ../../../node_modules/react-widgets/esm/SlideDownTransition.js
var _excluded13 = ["children", "className", "dropUp"];
function _extends14() {
  _extends14 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
function _objectWithoutPropertiesLoose14(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var transitionClasses = {
  [ENTERING]: "rw-slide-transition-entering",
  [EXITING]: "rw-slide-transition-exiting",
  [EXITED]: "rw-slide-transition-exited"
};
var SlideDownTransition = class extends import_react38.default.Component {
  constructor(...args) {
    super(...args);
    this.setContainerHeight = (elem) => {
      elem.style.height = this.getHeight(elem) + "px";
    };
    this.clearContainerHeight = (elem) => {
      elem.style.height = "";
    };
    this.handleEntered = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onEntered)
        this.props.onEntered();
    };
    this.handleEntering = () => {
      if (this.props.onEntering)
        this.props.onEntering();
    };
    this.handleExit = (elem) => {
      this.setContainerHeight(elem);
      if (this.props.onExit)
        this.props.onExit();
    };
    this.handleExited = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onExited)
        this.props.onExited();
    };
    this.handleTransitionEnd = (el, done) => {
      transitionEnd(el.firstChild, done);
    };
  }
  getHeight(container) {
    let content = container.firstChild;
    let margin = parseInt(css_default(content, "margin-top"), 10) + parseInt(css_default(content, "margin-bottom"), 10);
    let old = container.style.display;
    let height2;
    container.style.display = "block";
    height2 = (height(content) || 0) + (isNaN(margin) ? 0 : margin);
    container.style.display = old;
    return height2;
  }
  render() {
    const _this$props = this.props, {
      children,
      className,
      dropUp
    } = _this$props, props = _objectWithoutPropertiesLoose14(_this$props, _excluded13);
    return import_react38.default.createElement(Transition_default, _extends14({}, props, {
      appear: true,
      in: this.props.in,
      onEnter: this.setContainerHeight,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered,
      onExit: this.handleExit,
      onExited: this.handleExited,
      addEndListener: this.handleTransitionEnd,
      timeout: void 0
      /*hack*/
    }), (status, innerProps) => import_react38.default.createElement("div", _extends14({}, innerProps, {
      className: (0, import_classnames12.default)(className, dropUp && "rw-dropup", transitionClasses[status])
    }), import_react38.default.cloneElement(children, {
      className: (0, import_classnames12.default)("rw-slide-transition", children.props.className)
    })));
  }
};
SlideDownTransition.propTypes = {
  in: import_prop_types9.default.bool.isRequired,
  innerClassName: import_prop_types9.default.string,
  dropUp: import_prop_types9.default.bool,
  onExit: import_prop_types9.default.func,
  onExited: import_prop_types9.default.func,
  onEntering: import_prop_types9.default.func,
  onEntered: import_prop_types9.default.func
};
var SlideDownTransition_default = SlideDownTransition;

// ../../../node_modules/react-widgets/esm/Popup.js
var _excluded14 = ["id", "role", "dropUp", "className", "children", "open", "transition"];
function _extends15() {
  _extends15 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
function _objectWithoutPropertiesLoose15(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StaticContainer = import_react39.default.memo(({
  children
}) => children, (_, {
  shouldUpdate
}) => !shouldUpdate);
var Popup = import_react39.default.forwardRef((_ref, ref) => {
  let {
    id,
    role,
    dropUp,
    className,
    children,
    open = false,
    transition = SlideDownTransition_default
  } = _ref, props = _objectWithoutPropertiesLoose15(_ref, _excluded14);
  const Transition2 = transition;
  return import_react39.default.createElement(Transition2, _extends15({}, props, {
    in: open,
    dropUp,
    timeout: void 0,
    className: (0, import_classnames13.default)("rw-popup-container", className)
  }), import_react39.default.createElement("div", {
    id,
    className: "rw-popup",
    ref,
    role
  }, import_react39.default.createElement(StaticContainer, {
    shouldUpdate: open
  }, children)));
});
Popup.displayName = "Popup";
var Popup_default = Popup;

// ../../../node_modules/react-widgets/esm/InputAddon.js
var import_classnames14 = __toESM(require_classnames());
var import_react40 = __toESM(require_react());
var _excluded15 = ["className"];
function _extends16() {
  _extends16 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
function _objectWithoutPropertiesLoose16(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function InputAddon(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose16(_ref, _excluded15);
  return import_react40.default.createElement(Button_default, _extends16({}, props, {
    className: (0, import_classnames14.default)(className, "rw-input-addon rw-picker-btn")
  }));
}
var InputAddon_default = InputAddon;

// ../../../node_modules/react-widgets/esm/WidgetPicker.js
var import_classnames15 = __toESM(require_classnames());
var import_react41 = __toESM(require_react());
var _excluded16 = ["className"];
function _extends17() {
  _extends17 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
function _objectWithoutPropertiesLoose17(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function WidgetPicker(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose17(_ref, _excluded16);
  return import_react41.default.createElement("div", _extends17({}, props, {
    className: (0, import_classnames15.default)(className, "rw-widget-picker", "rw-widget-container")
  }));
}
var WidgetPicker_default = WidgetPicker;

// ../../../node_modules/react-widgets/esm/A11y.js
var import_react42 = __toESM(require_react());
var setActiveDescendant = (ref, activeId) => {
  if (!ref)
    return;
  ref.removeAttribute("aria-activedescendant");
  if (activeId)
    ref.setAttribute("aria-activedescendant", activeId);
};
var useActiveDescendant = (ref, id, visible, deps) => {
  (0, import_react42.useEffect)(() => {
    setActiveDescendant(ref.current, visible ? id : "");
  }, [ref, id, visible, ...deps]);
};

// ../../../node_modules/react-widgets/esm/Accessors.js
var import_react43 = __toESM(require_react());
var dataValue = (dataItem2, field) => {
  if (typeof field === "function")
    return field(dataItem2);
  if (dataItem2 == null)
    return dataItem2;
  if (typeof field === "string" && typeof dataItem2 === "object" && field in dataItem2)
    return dataItem2[field];
  return dataItem2;
};
var dataText = (dataItem2, textField) => {
  const value = dataValue(dataItem2, textField);
  return value == null ? "" : String(value);
};
function valueMatcher(a, b, dataKey) {
  return dataValue(a, dataKey) === dataValue(b, dataKey);
}
function dataIndexOf(data, value, dataKey) {
  const valueDataKey = dataValue(value, dataKey);
  let idx = -1;
  while (++idx < data.length) {
    const datum = data[idx];
    if (datum === value || dataValue(datum, dataKey) === valueDataKey)
      return idx;
  }
  return -1;
}
function dataItem(data, value, dataKey) {
  const idx = dataIndexOf(data, value, dataKey);
  return idx !== -1 ? data[idx] : value;
}
var useAccessors = (textField, dataKey) => {
  return (0, import_react43.useMemo)(() => ({
    text: (item) => dataText(item, textField),
    value: (item) => dataValue(item, dataKey),
    indexOf: (data, value) => dataIndexOf(data, value, dataKey),
    matches: (a, b) => valueMatcher(a, b, dataKey),
    findOrSelf: (data, value) => dataItem(data, value, dataKey),
    includes: (data, value) => dataIndexOf(data, value, dataKey) !== -1
  }), [textField, dataKey]);
};

// ../../../node_modules/react-widgets/esm/Filter.js
var import_react44 = __toESM(require_react());
var presets = {
  eq: (a, b) => a === b,
  contains: (a, b) => a.indexOf(b) !== -1,
  startsWith: (a, b) => a.lastIndexOf(b, 0) === 0
};
function normalizeFilter(filter, textField) {
  if (filter === false)
    return null;
  if (typeof filter === "function")
    return filter;
  const filterPreset = presets[filter === true ? "startsWith" : filter || "eq"];
  return (item, searchTerm) => {
    let textValue = dataText(item, textField);
    return filterPreset(textValue.toLowerCase(), searchTerm.toLowerCase());
  };
}
function useFilteredData(data, filterer, searchTerm = "", textAccessor) {
  return (0, import_react44.useMemo)(() => {
    const filter = normalizeFilter(filterer, textAccessor);
    if (!filter || !searchTerm.trim())
      return data;
    return data.filter((item, idx) => filter(item, searchTerm, idx));
  }, [data, filterer, searchTerm, textAccessor]);
}

// ../../../node_modules/react-widgets/esm/useDropdownToggle.js
function useDropdownToggle(isOpen, onToggle) {
  function open() {
    if (!isOpen)
      notify(onToggle, [true]);
  }
  function close() {
    if (isOpen)
      notify(onToggle, [false]);
  }
  function toggle() {
    if (isOpen)
      close();
    else
      open();
  }
  toggle.open = open;
  toggle.close = close;
  return toggle;
}

// ../../../node_modules/react-widgets/esm/Combobox.js
var _excluded17 = ["id", "className", "containerClassName", "placeholder", "autoFocus", "textField", "dataKey", "autoSelectMatches", "focusFirstItem", "value", "defaultValue", "onChange", "open", "defaultOpen", "onToggle", "filter", "busy", "disabled", "readOnly", "selectIcon", "hideCaret", "hideEmptyPopup", "busySpinner", "dropUp", "tabIndex", "popupTransition", "name", "onSelect", "onKeyDown", "onBlur", "onFocus", "inputProps", "listProps", "popupProps", "groupBy", "renderListItem", "renderListGroup", "optionComponent", "listComponent", "popupComponent", "data", "messages"];
function _extends18() {
  _extends18 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
function _objectWithoutPropertiesLoose18(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function indexOf(data, searchTerm, text) {
  if (!searchTerm.trim())
    return -1;
  for (let idx = 0; idx < data.length; idx++)
    if (text(data[idx]).toLowerCase() === searchTerm)
      return idx;
  return -1;
}
var propTypes5 = {
  value: PropTypes11.any,
  onChange: PropTypes11.func,
  open: PropTypes11.bool,
  onToggle: PropTypes11.func,
  renderListItem: PropTypes11.func,
  listComponent: PropTypes11.elementType,
  renderListGroup: PropTypes11.func,
  groupBy: accessor,
  data: PropTypes11.array,
  dataKey: accessor,
  textField: accessor,
  name: PropTypes11.string,
  /** Do not show the auto complete list when it returns no results. */
  hideEmptyPopup: PropTypes11.bool,
  /** Hide the combobox dropdown indicator. */
  hideCaret: PropTypes11.bool,
  /**
   *
   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}
   */
  onSelect: PropTypes11.func,
  autoFocus: PropTypes11.bool,
  disabled: disabled.acceptsArray,
  readOnly: disabled,
  busy: PropTypes11.bool,
  /** Specify the element used to render the select (down arrow) icon. */
  selectIcon: PropTypes11.node,
  /** Specify the element used to render the busy indicator */
  busySpinner: PropTypes11.node,
  dropUp: PropTypes11.bool,
  popupTransition: PropTypes11.elementType,
  placeholder: PropTypes11.string,
  /** Adds a css class to the input container element. */
  containerClassName: PropTypes11.string,
  inputProps: PropTypes11.object,
  listProps: PropTypes11.object,
  messages: PropTypes11.shape({
    openCombobox: message,
    emptyList: message,
    emptyFilter: message
  })
};
var ComboboxImpl = React27.forwardRef(function Combobox(_ref, outerRef) {
  let {
    id,
    className,
    containerClassName,
    placeholder,
    autoFocus,
    textField,
    dataKey,
    autoSelectMatches,
    focusFirstItem = false,
    value,
    defaultValue = "",
    onChange,
    open,
    defaultOpen = false,
    onToggle,
    filter = true,
    busy,
    disabled: disabled2,
    readOnly,
    selectIcon = caretDown,
    hideCaret,
    hideEmptyPopup,
    busySpinner,
    dropUp,
    tabIndex,
    popupTransition,
    name,
    onSelect,
    onKeyDown,
    onBlur,
    onFocus,
    inputProps,
    listProps,
    popupProps,
    groupBy,
    renderListItem,
    renderListGroup,
    optionComponent,
    listComponent: ListComponent = List_default,
    popupComponent: Popup2 = Popup_default,
    data: rawData = [],
    messages: userMessages
  } = _ref, elementProps = _objectWithoutPropertiesLoose18(_ref, _excluded17);
  let [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);
  const ref = (0, import_react45.useRef)(null);
  const inputRef = (0, import_react45.useRef)(null);
  const listRef = (0, import_react45.useRef)(null);
  const [suggestion, setSuggestion] = (0, import_react45.useState)(null);
  const shouldFilter = (0, import_react45.useRef)(false);
  const inputId = useInstanceId(id, "_input");
  const listId = useInstanceId(id, "_listbox");
  const activeId = useInstanceId(id, "_listbox_active_option");
  const accessors = useAccessors(textField, dataKey);
  const messages2 = useMessagesWithDefaults(userMessages);
  const toggle = useDropdownToggle(currentOpen, handleOpen);
  const isDisabled = disabled2 === true;
  const isReadOnly = !!readOnly;
  const data = useFilteredData(rawData, filter, shouldFilter.current ? accessors.text(currentValue) : void 0, accessors.text);
  const selectedItem = (0, import_react45.useMemo)(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);
  const list = useFocusList({
    activeId,
    scope: ref,
    focusFirstItem,
    anchorItem: currentOpen ? selectedItem : void 0
  });
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2) {
      if (!focused2) {
        shouldFilter.current = false;
        toggle.close();
        setSuggestion(null);
        list.focus(void 0);
      } else {
        focus({
          preventScroll: true
        });
      }
    }
  });
  useActiveDescendant(ref, activeId, currentOpen, [list.getFocused()]);
  const handleClick = (e) => {
    if (readOnly || isDisabled)
      return;
    e.preventDefault();
    focus();
    toggle();
  };
  const handleSelect = (data2, originalEvent) => {
    toggle.close();
    shouldFilter.current = false;
    setSuggestion(null);
    notify(onSelect, [data2, {
      originalEvent
    }]);
    change(data2, originalEvent, true);
    focus({
      preventScroll: true
    });
  };
  const handleInputKeyDown = ({
    key
  }) => {
    if (key === "Backspace" || key === "Delete") {
      list.focus(null);
    }
  };
  const handleInputChange = (event) => {
    let idx = autoSelectMatches ? indexOf(rawData, event.target.value.toLowerCase(), accessors.text) : -1;
    shouldFilter.current = true;
    setSuggestion(null);
    const nextValue = idx === -1 ? event.target.value : rawData[idx];
    change(nextValue, event);
    if (!nextValue)
      toggle.close();
    else
      toggle.open();
  };
  const handleKeyDown = (e) => {
    if (readOnly)
      return;
    let {
      key,
      altKey,
      shiftKey
    } = e;
    notify(onKeyDown, [e]);
    if (e.defaultPrevented)
      return;
    const select = (item) => item != null && handleSelect(item, e);
    const setFocused = (el) => {
      if (!el)
        return;
      setSuggestion(list.toDataItem(el));
      list.focus(el);
    };
    if (key === "End" && currentOpen && !shiftKey) {
      e.preventDefault();
      setFocused(list.last());
    } else if (key === "Home" && currentOpen && !shiftKey) {
      e.preventDefault();
      setFocused(list.first());
    } else if (key === "Escape" && currentOpen) {
      e.preventDefault();
      setSuggestion(null);
      toggle.close();
    } else if (key === "Enter" && currentOpen) {
      e.preventDefault();
      select(list.getFocused());
    } else if (key === "ArrowDown") {
      e.preventDefault();
      if (currentOpen) {
        setFocused(list.next());
      } else {
        return toggle.open();
      }
    } else if (key === "ArrowUp") {
      e.preventDefault();
      if (altKey)
        return toggle.close();
      if (currentOpen) {
        setFocused(list.prev());
      }
    }
  };
  function focus(opts) {
    if (inputRef.current)
      inputRef.current.focus(opts);
  }
  function change(nextValue, originalEvent, selected = false) {
    handleChange(nextValue, {
      lastValue: currentValue,
      originalEvent,
      source: selected ? "listbox" : "input"
    });
  }
  (0, import_react45.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);
  let valueItem = accessors.findOrSelf(data, currentValue);
  let inputValue = accessors.text(suggestion || valueItem);
  let completeType = filter ? "list" : "none";
  let popupOpen = currentOpen && (!hideEmptyPopup || !!data.length);
  let inputReadOnly = (
    // @ts-ignore
    (inputProps == null ? void 0 : inputProps.readOnly) != null ? inputProps == null ? void 0 : inputProps.readOnly : readOnly
  );
  let inputAddon = false;
  if (!hideCaret) {
    inputAddon = React27.createElement(InputAddon_default, {
      busy,
      icon: selectIcon,
      spinner: busySpinner,
      onClick: handleClick,
      disabled: !!isDisabled || isReadOnly,
      label: messages2.openCombobox()
    });
  } else if (busy) {
    inputAddon = React27.createElement("span", {
      "aria-hidden": "true",
      className: "rw-btn rw-picker-caret"
    }, busySpinner || Spinner);
  }
  return React27.createElement(Widget_default, _extends18({}, elementProps, {
    ref,
    open: currentOpen,
    dropUp,
    focused,
    disabled: isDisabled,
    readOnly: isReadOnly
  }, focusEvents, {
    onKeyDown: handleKeyDown,
    className: (0, import_classnames16.default)(className, "rw-combobox")
  }), React27.createElement(WidgetPicker_default, {
    className: (0, import_classnames16.default)(containerClassName, hideCaret && "rw-widget-input", hideCaret && !busy && "rw-hide-caret")
  }, React27.createElement(Input_default, _extends18({}, inputProps, {
    role: "combobox",
    name,
    id: inputId,
    className: (0, import_classnames16.default)(
      // @ts-ignore
      inputProps && inputProps.className,
      "rw-combobox-input",
      !hideCaret && "rw-widget-input"
    ),
    autoFocus,
    tabIndex,
    disabled: isDisabled,
    readOnly: inputReadOnly,
    "aria-busy": !!busy,
    "aria-owns": listId,
    "aria-autocomplete": completeType,
    "aria-expanded": currentOpen,
    "aria-haspopup": true,
    placeholder,
    value: inputValue,
    onChange: handleInputChange,
    onKeyDown: handleInputKeyDown,
    ref: inputRef
  })), inputAddon), React27.createElement(FocusListContext.Provider, {
    value: list.context
  }, shouldRenderPopup && React27.createElement(Popup2, _extends18({}, popupProps, {
    dropUp,
    open: popupOpen,
    transition: popupTransition,
    onEntering: () => listRef.current.scrollIntoView()
  }), React27.createElement(ListComponent, _extends18({}, listProps, {
    id: listId,
    tabIndex: -1,
    data,
    groupBy,
    disabled: disabled2,
    accessors,
    renderItem: renderListItem,
    renderGroup: renderListGroup,
    optionComponent,
    value: selectedItem,
    searchTerm: valueItem && accessors.text(valueItem) || "",
    "aria-hidden": !popupOpen,
    "aria-labelledby": inputId,
    "aria-live": popupOpen ? "polite" : void 0,
    onChange: (d, meta) => handleSelect(d, meta.originalEvent),
    ref: listRef,
    messages: {
      emptyList: rawData.length ? messages2.emptyFilter : messages2.emptyList
    }
  })))));
});
ComboboxImpl.displayName = "Combobox";
ComboboxImpl.propTypes = propTypes5;
var Combobox_default = ComboboxImpl;

// ../../../node_modules/react-widgets/esm/DatePicker.js
var import_classnames18 = __toESM(require_classnames());
var import_prop_types11 = __toESM(require_prop_types());
var import_react50 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/DatePickerInput.js
var import_react46 = __toESM(require_react());
var _excluded18 = ["value", "formatter", "editing", "editFormat", "displayFormat", "localizer", "parse", "onChange", "onBlur", "disabled", "readOnly"];
function _extends19() {
  _extends19 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
function _objectWithoutPropertiesLoose19(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DatePickerInput = import_react46.default.forwardRef((_ref, ref) => {
  let {
    value,
    formatter,
    editing,
    editFormat,
    displayFormat,
    localizer,
    parse,
    onChange,
    onBlur,
    disabled: disabled2,
    readOnly
  } = _ref, props = _objectWithoutPropertiesLoose19(_ref, _excluded18);
  const needsFlush = (0, import_react46.useRef)(false);
  const nextTextValue = (0, import_react46.useMemo)(() => value instanceof Date && isValid(value) ? localizer.formatDate(value, formatter, editing ? editFormat : displayFormat) : "", [value, formatter, localizer, displayFormat, editing, editFormat]);
  const [prevValue, setPrevValue] = (0, import_react46.useState)(nextTextValue);
  const [textValue, setTextValue] = (0, import_react46.useState)(nextTextValue);
  if (prevValue !== nextTextValue) {
    setPrevValue(nextTextValue);
    setTextValue(nextTextValue);
  }
  const handleBlur = (event) => {
    if (onBlur)
      onBlur(event);
    if (needsFlush.current) {
      let date2 = parse(event.target.value);
      const dateIsInvalid = event.target.value != "" && isNullOrInvalid(date2);
      if (dateIsInvalid) {
        setTextValue("");
      }
      needsFlush.current = false;
      setPrevValue(null);
      onChange(date2, event.target.value);
    }
  };
  const handleChange = ({
    target
  }) => {
    needsFlush.current = true;
    setTextValue(target.value);
  };
  return import_react46.default.createElement(Input_default, _extends19({}, props, {
    type: "text",
    ref,
    className: "rw-widget-input",
    value: textValue,
    disabled: disabled2,
    readOnly,
    onChange: handleChange,
    onBlur: handleBlur
  }));
});
DatePickerInput.displayName = "DatePickerInput";
var DatePickerInput_default = DatePickerInput;
function isValid(d) {
  return !isNaN(d.getTime());
}

// ../../../node_modules/react-widgets/esm/TimeInput.js
var import_classnames17 = __toESM(require_classnames());
var import_prop_types10 = __toESM(require_prop_types());
var import_react48 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/DateTimePartInput.js
var import_react47 = __toESM(require_react());
var _excluded19 = ["value", "valueText", "pad", "placeholder", "min", "max", "emptyChar"];
function _extends20() {
  _extends20 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
function _objectWithoutPropertiesLoose20(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var padStart = (value, len, padding) => {
  let str = String(value != null ? value : "");
  while (str.length < len)
    str = padding + str;
  return str;
};
var DateTimePartInput = import_react47.default.forwardRef((_ref, ref) => {
  let {
    value,
    valueText = String(value != null ? value : ""),
    pad,
    placeholder,
    min: min2,
    max: max2,
    emptyChar
  } = _ref, props = _objectWithoutPropertiesLoose20(_ref, _excluded19);
  return import_react47.default.createElement("input", _extends20({}, props, {
    ref,
    "data-focusable": true,
    autoComplete: "off",
    role: "spinbutton",
    "aria-valuenow": value != null ? value : void 0,
    "aria-valuemin": min2,
    "aria-valuemax": max2,
    "aria-valuetext": valueText,
    "aria-disabled": props.disabled || props.readOnly,
    "arai-placeholder": placeholder,
    placeholder,
    className: "rw-time-part-input",
    value: placeholder && !value ? "" : padStart(value, pad || 0, value == null ? emptyChar : "0")
  }));
});
var DateTimePartInput_default = DateTimePartInput;

// ../../../node_modules/react-widgets/esm/TimeInput.js
var _excluded20 = ["value", "use12HourClock", "padValues", "emptyCharacter", "precision", "noClearButton", "hoursAddon", "minutesAddon", "secondsAddon", "millisecondsAddon", "className", "disabled", "readOnly", "datePart", "onChange", "onBlur", "onFocus"];
function _extends21() {
  _extends21 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function _objectWithoutPropertiesLoose21(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var selectTextRange = (el) => {
  if (el instanceof HTMLInputElement)
    return el.select();
  const range = document.createRange();
  range.selectNodeContents(el);
  const selection = window.getSelection();
  if (selection) {
    selection.removeAllRanges();
    selection.addRange(range);
  }
};
var isEmptyValue = (p, precision) => p.hours == null && p.minutes == null && (precision != "seconds" && precision !== "milliseconds" || p.seconds == null) && (precision !== "milliseconds" || p.milliseconds == null);
var isPartialValue = (p, precision) => p.hours == null || p.minutes == null || (precision === "seconds" || precision === "milliseconds") && p.seconds == null || precision === "milliseconds" && p.milliseconds == null;
var getValueParts = (value, use12HourClock) => {
  let hours2, minutes2, seconds2, milliseconds2;
  let meridiem = "AM";
  if (value) {
    hours2 = value.getHours();
    if (use12HourClock) {
      meridiem = hours2 < 12 ? "AM" : "PM";
      hours2 = hours2 % 12 || 12;
    }
    minutes2 = value.getMinutes();
    seconds2 = value.getSeconds();
    milliseconds2 = value.getMilliseconds();
  }
  return {
    hours: hours2,
    minutes: minutes2,
    seconds: seconds2,
    milliseconds: milliseconds2,
    meridiem
  };
};
var TEST_VALID = {
  hours: /^([1]?[0-9]|2[0-3])$/,
  hours12: /^(1[0-2]|0?[1-9])$/,
  minutes: /^([0-5]?\d)$/,
  seconds: /^([0-5]?\d)$/,
  milliseconds: /^(\d{1,3})$/
};
var TEST_COMPLETE = {
  hours: /^([3-9]|\d{2})$/,
  hours12: /^(\d{2}|[2-9])$/,
  minutes: /^(d{2}|[6-9])$/,
  seconds: /^(d{2}|[6-9])$/,
  milliseconds: /^(\d{3})$/
};
function testPart(value, part, use12HourClock, tests) {
  const key = part === "hours" && use12HourClock ? "hours12" : part;
  return tests[key].test(value);
}
var isValid2 = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_VALID);
var isComplete = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_COMPLETE);
var propTypes6 = {
  /**
   * @example ['valuePicker', [ ['new Date()'] ]]
   */
  value: import_prop_types10.default.instanceOf(Date),
  /**
   * @example ['onChangePicker', [ ['new Date()'] ]]
   */
  onChange: import_prop_types10.default.func,
  /**
   * The default date used to construct a new time when the `value` is empty
   *
   * @default new Date()
   **/
  datePart: import_prop_types10.default.instanceOf(Date),
  /**
   * Use a 12 hour clock (with AM/PM) instead of 24 hour one.
   * The configured localizer may provide a default value .
   **/
  use12HourClock: import_prop_types10.default.bool,
  /** Time part values will be padded by `0` */
  padValues: import_prop_types10.default.bool,
  /** The string character used to pad empty, or cleared values */
  emptyCharacter: import_prop_types10.default.string,
  /** Hide the input clear button */
  noClearButton: import_prop_types10.default.bool,
  /**
   * @example ['disabled', ['new Date()']]
   */
  disabled: import_prop_types10.default.bool,
  /**
   * @example ['readOnly', ['new Date()']]
   */
  readOnly: import_prop_types10.default.bool,
  /** Controls how precise of a time can be input **/
  precision: import_prop_types10.default.oneOf(["minutes", "seconds", "milliseconds"]).isRequired,
  /**
   * The seperator between hours and minutes
   * @default ':'
   */
  hoursAddon: import_prop_types10.default.node,
  /**
   * The seperator between hours and minutes
   * @default ':'
   */
  minutesAddon: import_prop_types10.default.node,
  /**
   * The seperator between hours and minutes
   * @default ':'
   */
  secondsAddon: import_prop_types10.default.node,
  /**
   * The seperator between hours and minutes
   * @default '.'
   */
  millisecondsAddon: import_prop_types10.default.node
};
var defaultProps = {
  hoursAddon: ":",
  padValues: true,
  precision: "minutes",
  emptyCharacter: "-"
};
function useTimePartState(value, use12HourClock) {
  const [state, setState] = (0, import_react48.useState)(() => ({
    value,
    use12HourClock,
    timeParts: getValueParts(value, use12HourClock)
  }));
  const setTimeParts = (0, import_react48.useCallback)((timeParts) => setState((s) => Object.assign({}, s, {
    timeParts
  })), [setState]);
  if (state.value !== value || state.use12HourClock !== use12HourClock) {
    setState({
      value,
      use12HourClock,
      timeParts: getValueParts(value, use12HourClock)
    });
  }
  return [state.timeParts, setTimeParts];
}
function TimeInput(uncontrolledProps) {
  const _useUncontrolled = useUncontrolled(uncontrolledProps, {
    value: "onChange"
  }), {
    value,
    use12HourClock,
    padValues: pad,
    emptyCharacter,
    precision,
    noClearButton,
    hoursAddon,
    minutesAddon,
    secondsAddon,
    millisecondsAddon,
    className,
    disabled: disabled2,
    readOnly,
    datePart,
    onChange,
    onBlur,
    onFocus
  } = _useUncontrolled, props = _objectWithoutPropertiesLoose21(_useUncontrolled, _excluded20);
  let minsAddon = minutesAddon !== void 0 ? minutesAddon : precision === "seconds" || precision === "milliseconds" ? ":" : "";
  let secsAddon = secondsAddon !== void 0 ? secondsAddon : precision === "milliseconds" ? ":" : "";
  const ref = (0, import_react48.useRef)(null);
  const hourRef = (0, import_react48.useRef)(null);
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: disabled2,
    onBlur,
    onFocus
  }, {
    didHandle: (focused2, e) => {
      var _hourRef$current;
      if (!focused2)
        return;
      if (!e.target.dataset.focusable)
        (_hourRef$current = hourRef.current) == null ? void 0 : _hourRef$current.focus();
      else
        select(e.target);
    }
  });
  const [timeParts, setTimeParts] = useTimePartState(value != null ? value : null, use12HourClock != null ? use12HourClock : false);
  function getDatePart() {
    return dates_default.startOf(datePart || /* @__PURE__ */ new Date(), "day");
  }
  const getMin = (part) => part === "hours" ? 1 : 0;
  const getMax = (part) => {
    if (part === "hours")
      return use12HourClock ? 12 : 23;
    if (part === "milliseconds")
      return 999;
    return 59;
  };
  function select(target = document.activeElement) {
    window.Promise.resolve().then(() => {
      if (focused)
        selectTextRange(target);
    });
  }
  const handleClear = () => {
    var _hourRef$current2;
    (_hourRef$current2 = hourRef.current) == null ? void 0 : _hourRef$current2.focus();
    if (value)
      onChange(null);
    else
      setTimeParts(getValueParts(null));
  };
  const handleChange = (part, event) => {
    const currentValue = timeParts[part];
    const {
      target
    } = event;
    const rawValue = target.value;
    let strValue = `${currentValue || ""}${rawValue}`;
    let numValue = +strValue;
    if (isNaN(numValue) || strValue && !isValid2(strValue, part, use12HourClock != null ? use12HourClock : false)) {
      if (isValid2(rawValue, part, use12HourClock != null ? use12HourClock : false) && !isNaN(+rawValue)) {
        strValue = rawValue;
        numValue = +rawValue;
      } else {
        return event.preventDefault();
      }
    }
    const nextValue = target.value ? numValue : null;
    notifyChange({
      [part]: nextValue
    });
    if (nextValue != null && isComplete(strValue, part, use12HourClock != null ? use12HourClock : false)) {
      focusNext(event.currentTarget, 1);
    } else {
      select(target);
    }
  };
  const handleSelect = ({
    target
  }) => {
    select(target);
  };
  const handleKeyDown = (part, event) => {
    const {
      key
    } = event;
    const input = event.currentTarget;
    const {
      selectionStart: start,
      selectionEnd: end
    } = input;
    const isRTL = getComputedStyle(input).getPropertyValue("direction") === "rtl";
    const isMeridiem = part === "meridiem";
    const isNext = key === (isRTL ? "ArrowLeft" : "ArrowRight");
    const isPrev = key === (isRTL ? "ArrowRight" : "ArrowLeft");
    if (key === "ArrowUp") {
      event.preventDefault();
      increment(part, 1);
    }
    if (key === "ArrowDown") {
      event.preventDefault();
      increment(part, -1);
    }
    if (isPrev && (isMeridiem || start - 1 < 0)) {
      event.preventDefault();
      focusNext(input, -1);
    }
    if (isNext && (isMeridiem || input.value.length <= end + 1)) {
      event.preventDefault();
      focusNext(input, 1);
    }
    if (readOnly && key !== "Tab") {
      event.preventDefault();
    }
    if (isMeridiem) {
      if (key === "a" || key === "A")
        notifyChange({
          meridiem: "AM"
        });
      if (key === "p" || key === "P")
        notifyChange({
          meridiem: "PM"
        });
    }
  };
  const increment = (part, inc) => {
    let nextPart = timeParts[part];
    if (part === "meridiem") {
      nextPart = nextPart === "AM" ? "PM" : "AM";
    } else {
      nextPart = (nextPart || 0) + inc;
      if (!isValid2(String(nextPart), part, use12HourClock != null ? use12HourClock : false))
        return;
    }
    notifyChange({
      [part]: nextPart
    });
    select();
  };
  function notifyChange(updates) {
    const nextTimeParts = Object.assign({}, timeParts, updates);
    if (value && isEmptyValue(nextTimeParts, precision)) {
      return onChange(null);
    }
    if (isPartialValue(nextTimeParts, precision))
      return setTimeParts(nextTimeParts);
    let {
      hours: hours3,
      minutes: minutes3,
      seconds: seconds3,
      milliseconds: milliseconds3,
      meridiem: meridiem2
    } = nextTimeParts;
    let nextDate = new Date(value || getDatePart());
    if (use12HourClock) {
      if (hours3 === 12)
        hours3 = 0;
      hours3 += meridiem2 === "PM" ? 12 : 0;
    }
    nextDate.setHours(hours3);
    nextDate.setMinutes(minutes3);
    if (seconds3 != null)
      nextDate.setSeconds(seconds3);
    if (milliseconds3 != null)
      nextDate.setMilliseconds(milliseconds3);
    onChange(nextDate, {
      lastValue: value,
      timeParts
    });
  }
  function focusNext(input, delta) {
    let nodes = qsa(ref.current, "* [data-focusable]");
    let next2 = nodes[nodes.indexOf(input) + delta];
    next2 == null ? void 0 : next2.focus();
    select(next2);
  }
  const {
    hours: hours2,
    minutes: minutes2,
    seconds: seconds2,
    milliseconds: milliseconds2,
    meridiem
  } = timeParts;
  const showClear = !isEmptyValue(timeParts, precision);
  return import_react48.default.createElement(Widget_default, _extends21({}, props, {
    role: "group",
    ref
  }, focusEvents, {
    focused,
    disabled: disabled2,
    readOnly,
    className: (0, import_classnames17.default)(className, "rw-time-input rw-widget-input")
  }), import_react48.default.createElement(DateTimePartInput_default, {
    size: 2,
    pad: pad ? 2 : void 0,
    value: hours2,
    disabled: disabled2,
    readOnly,
    "aria-label": "hours",
    min: getMin("hours"),
    max: getMax("hours"),
    ref: hourRef,
    emptyChar: emptyCharacter,
    onSelect: handleSelect,
    onChange: (e) => handleChange("hours", e),
    onKeyDown: (e) => handleKeyDown("hours", e)
  }), hoursAddon && import_react48.default.createElement("span", null, hoursAddon), import_react48.default.createElement(DateTimePartInput_default, {
    size: 2,
    pad: pad ? 2 : void 0,
    value: minutes2,
    disabled: disabled2,
    readOnly,
    "aria-label": "minutes",
    min: getMin("minutes"),
    max: getMax("minutes"),
    emptyChar: emptyCharacter,
    onSelect: handleSelect,
    onChange: (e) => handleChange("minutes", e),
    onKeyDown: (e) => handleKeyDown("minutes", e)
  }), minsAddon && import_react48.default.createElement("span", null, minsAddon), (precision === "seconds" || precision === "milliseconds") && import_react48.default.createElement(import_react48.default.Fragment, null, import_react48.default.createElement(DateTimePartInput_default, {
    size: 2,
    pad: pad ? 2 : void 0,
    value: seconds2,
    disabled: disabled2,
    readOnly,
    "aria-label": "seconds",
    min: getMin("seconds"),
    max: getMax("seconds"),
    emptyChar: emptyCharacter,
    onSelect: handleSelect,
    onChange: (e) => handleChange("seconds", e),
    onKeyDown: (e) => handleKeyDown("seconds", e)
  }), secsAddon && import_react48.default.createElement("span", null, secsAddon)), precision === "milliseconds" && import_react48.default.createElement(import_react48.default.Fragment, null, import_react48.default.createElement(DateTimePartInput_default, {
    size: 3,
    pad: pad ? 3 : void 0,
    value: milliseconds2,
    disabled: disabled2,
    readOnly,
    "aria-label": "milliseconds",
    min: getMin("milliseconds"),
    max: getMax("milliseconds"),
    emptyChar: emptyCharacter,
    onSelect: handleSelect,
    onChange: (e) => handleChange("milliseconds", e),
    onKeyDown: (e) => handleKeyDown("milliseconds", e)
  }), millisecondsAddon && import_react48.default.createElement("span", null, millisecondsAddon)), use12HourClock && import_react48.default.createElement("div", {
    role: "listbox",
    "aria-label": "AM/PM",
    "aria-disabled": disabled2,
    "aria-readonly": readOnly,
    className: "rw-time-part-meridiem"
  }, import_react48.default.createElement("div", {
    "data-focusable": true,
    role: "option",
    "aria-atomic": true,
    "aria-selected": true,
    "aria-setsize": 2,
    "aria-live": "assertive",
    "aria-disabled": disabled2,
    "aria-readonly": readOnly,
    "aria-posinset": meridiem === "AM" ? 1 : 2,
    tabIndex: !disabled2 ? 0 : void 0,
    onFocus: handleSelect,
    onSelect: handleSelect,
    onKeyDown: (e) => handleKeyDown("meridiem", e)
  }, import_react48.default.createElement("abbr", null, meridiem))), !noClearButton && import_react48.default.createElement(Button_default, {
    label: "clear input",
    onClick: handleClear,
    disabled: disabled2 || readOnly,
    className: (0, import_classnames17.default)("rw-time-input-clear", showClear && "rw-show")
  }, times));
}
TimeInput.propTypes = propTypes6;
TimeInput.defaultProps = defaultProps;
var TimeInput_default = TimeInput;

// ../../../node_modules/react-widgets/esm/useTabTrap.js
var import_react49 = __toESM(require_react());
var defaultSelector = ["input", "textarea", "select", 'button:not([tabindex="-1"])', '[tabindex="0"]'].join(",");
var getDocument = () => document;
function useTabTrap(ref, selector = defaultSelector) {
  const startedRef = (0, import_react49.useRef)(false);
  useEventListener(getDocument, "keydown", (event) => {
    if (!startedRef.current || !ref.current || event.key !== "Tab") {
      return;
    }
    const tabbables = ref.current.querySelectorAll(selector);
    if (event.shiftKey && event.target === tabbables[0]) {
      tabbables[tabbables.length - 1].focus();
      event.preventDefault();
    } else if (!event.shiftKey && event.target === tabbables[tabbables.length - 1] || !ref.current.contains(event.target)) {
      tabbables[0].focus();
      event.preventDefault();
    }
  });
  return (0, import_react49.useMemo)(() => ({
    focus() {
      const tabbables = ref.current.querySelectorAll(selector);
      const first = tabbables[0];
      if (first)
        first.focus();
    },
    start() {
      startedRef.current = true;
    },
    stop() {
      startedRef.current = false;
    }
  }), [ref, selector]);
}

// ../../../node_modules/react-widgets/esm/DatePicker.js
var _excluded21 = ["id", "value", "onChange", "onSelect", "onToggle", "onKeyDown", "onKeyPress", "onCurrentDateChange", "inputProps", "calendarProps", "timeInputProps", "popupProps", "autoFocus", "tabIndex", "disabled", "readOnly", "className", "valueFormat", "valueDisplayFormat", "valueEditFormat", "containerClassName", "name", "selectIcon", "placeholder", "includeTime", "min", "max", "open", "dropUp", "parse", "messages", "formats", "currentDate", "popupTransition", "popupComponent", "timePrecision", "aria-labelledby", "aria-describedby"];
function _extends22() {
  _extends22 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
function _objectWithoutPropertiesLoose22(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes7 = {
  /**
   * @example ['valuePicker', [ ['new Date()', null] ]]
   */
  value: import_prop_types11.default.instanceOf(Date),
  /**
   * @example ['onChangePicker', [ ['new Date()', null] ]]
   */
  onChange: import_prop_types11.default.func,
  /**
   * @example ['openDate']
   */
  open: import_prop_types11.default.bool,
  onToggle: import_prop_types11.default.func,
  /**
   * Default current date at which the calendar opens. If none is provided, opens at today's date or the `value` date (if any).
   */
  currentDate: import_prop_types11.default.instanceOf(Date),
  /**
   * Change event Handler that is called when the currentDate is changed. The handler is called with the currentDate object.
   */
  onCurrentDateChange: import_prop_types11.default.func,
  onSelect: import_prop_types11.default.func,
  /**
   * The minimum Date that can be selected. Min only limits selection, it doesn't constrain the date values that
   * can be typed or pasted into the widget. If you need this behavior you can constrain values via
   * the `onChange` handler.
   *
   * @example ['prop', ['min', 'new Date()']]
   */
  min: import_prop_types11.default.instanceOf(Date),
  /**
   * The maximum Date that can be selected. Max only limits selection, it doesn't constrain the date values that
   * can be typed or pasted into the widget. If you need this behavior you can constrain values via
   * the `onChange` handler.
   *
   * @example ['prop', ['max', 'new Date()']]
   */
  max: import_prop_types11.default.instanceOf(Date),
  /**
   * A formatting options used to display the date value. This is a shorthand for
   * setting both `valueDisplayFormat` and `valueEditFormat`.
   */
  valueFormat: import_prop_types11.default.any,
  /**
   * A formatting options used to display the date value. For more information about formats
   * visit the [Localization page](./localization)
   *
   * ```tsx live
   * import { DatePicker } from 'react-widgets';
   *
   * <DatePicker
   *   defaultValue={new Date()}
   *   valueDisplayFormat={{ dateStyle: "medium" }}
   * />
   * ```
   */
  valueDisplayFormat: import_prop_types11.default.any,
  /**
   * A formatting options used while the date input has focus. Useful for showing a simpler format for inputing.
   * For more information about formats visit the [Localization page](./localization)
   *
   * ```tsx live
   * import { DatePicker } from 'react-widgets';
   *
   * <DatePicker
   *   defaultValue={new Date()}
   *   valueEditFormat={{ dateStyle: "short" }}
   *   valueDisplayFormat={{ dateStyle: "medium" }}
   * />
   * ```
   */
  valueEditFormat: import_prop_types11.default.any,
  /**
   * Enable the time list component of the picker.
   */
  includeTime: import_prop_types11.default.bool,
  timePrecision: import_prop_types11.default.oneOf(["minutes", "seconds", "milliseconds"]),
  timeInputProps: import_prop_types11.default.object,
  /** Specify the element used to render the calendar dropdown icon. */
  selectIcon: import_prop_types11.default.node,
  dropUp: import_prop_types11.default.bool,
  popupTransition: import_prop_types11.default.elementType,
  placeholder: import_prop_types11.default.string,
  name: import_prop_types11.default.string,
  autoFocus: import_prop_types11.default.bool,
  /**
   * @example ['disabled', ['new Date()']]
   */
  disabled: import_prop_types11.default.bool,
  /**
   * @example ['readOnly', ['new Date()']]
   */
  readOnly: import_prop_types11.default.bool,
  /**
   * Determines how the widget parses the typed date string into a Date object. You can provide an array of formats to try,
   * or provide a function that returns a date to handle parsing yourself. When `parse` is unspecified and
   * the `format` prop is a `string` parse will automatically use that format as its default.
   */
  parse: import_prop_types11.default.oneOfType([import_prop_types11.default.any, import_prop_types11.default.func]),
  /** @ignore */
  tabIndex: import_prop_types11.default.any,
  /** @ignore */
  "aria-labelledby": import_prop_types11.default.string,
  /** @ignore */
  "aria-describedby": import_prop_types11.default.string,
  /** @ignore */
  localizer: import_prop_types11.default.any,
  onKeyDown: import_prop_types11.default.func,
  onKeyPress: import_prop_types11.default.func,
  onBlur: import_prop_types11.default.func,
  onFocus: import_prop_types11.default.func,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types11.default.string,
  calendarProps: import_prop_types11.default.object,
  inputProps: import_prop_types11.default.object,
  messages: import_prop_types11.default.shape({
    dateButton: import_prop_types11.default.string
  })
};
var defaultProps2 = Object.assign({}, Calendar_default.defaultProps, {
  min: new Date(1900, 0, 1),
  max: new Date(2099, 11, 31),
  selectIcon: calendar,
  formats: {}
});
var DatePicker = import_react50.default.forwardRef((uncontrolledProps, outerRef) => {
  const _useUncontrolled = useUncontrolled(uncontrolledProps, {
    open: "onToggle",
    value: "onChange",
    currentDate: "onCurrentDateChange"
  }), {
    id,
    value,
    onChange,
    onSelect,
    onToggle,
    onKeyDown,
    onKeyPress,
    onCurrentDateChange,
    inputProps,
    calendarProps,
    timeInputProps,
    popupProps,
    autoFocus,
    tabIndex,
    disabled: disabled2,
    readOnly,
    className,
    // @ts-ignore
    valueFormat,
    valueDisplayFormat = valueFormat,
    valueEditFormat = valueFormat,
    containerClassName,
    name,
    selectIcon,
    placeholder,
    includeTime = false,
    min: min2,
    max: max2,
    open,
    dropUp,
    parse,
    messages: messages2,
    formats,
    currentDate,
    popupTransition,
    popupComponent: Popup2 = Popup_default,
    timePrecision,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby
  } = _useUncontrolled, elementProps = _objectWithoutPropertiesLoose22(_useUncontrolled, _excluded21);
  const localizer = useLocalizer(messages2, formats);
  const ref = (0, import_react50.useRef)(null);
  const calRef = (0, import_react50.useRef)(null);
  const tabTrap = useTabTrap(calRef);
  const inputId = useInstanceId(id, "_input");
  const dateId = useInstanceId(id, "_date");
  const currentFormat = includeTime ? "datetime" : "date";
  const toggle = useDropdownToggle(open, onToggle);
  const [focusEvents, focused] = useFocusManager2(ref, uncontrolledProps, {
    didHandle(focused2) {
      if (!focused2) {
        toggle.close();
        tabTrap.stop();
      } else if (open) {
        tabTrap.focus();
      }
    }
  });
  const dateParser = (0, import_react50.useCallback)((str) => {
    var _localizer$parseDate, _ref;
    if (typeof parse == "function") {
      var _parse;
      return (_parse = parse(str, localizer)) != null ? _parse : null;
    }
    return (_localizer$parseDate = localizer.parseDate(str, (_ref = parse != null ? parse : valueEditFormat) != null ? _ref : valueDisplayFormat)) != null ? _localizer$parseDate : null;
  }, [localizer, parse, valueDisplayFormat, valueEditFormat]);
  const handleChange = useEventCallback((date2, str, constrain) => {
    if (readOnly || disabled2)
      return;
    if (constrain)
      date2 = inRangeValue2(date2);
    if (onChange) {
      if (date2 == null || value == null) {
        if (date2 != value)
          onChange(date2, str);
      } else if (!dates_default.eq(date2, value)) {
        onChange(date2, str);
      }
    }
  });
  const handleKeyDown = useEventCallback((e) => {
    if (readOnly)
      return;
    notify(onKeyDown, [e]);
    if (e.defaultPrevented)
      return;
    if (e.key === "Escape" && open) {
      toggle.close();
    } else if (e.altKey) {
      if (e.key === "ArrowDown") {
        e.preventDefault();
        toggle.open();
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        toggle.close();
      }
    }
  });
  const handleKeyPress = useEventCallback((e) => {
    notify(onKeyPress, [e]);
    if (e.defaultPrevented)
      return;
  });
  const handleDateSelect = useEventCallback((date2) => {
    var _ref$current;
    let dateTime = dates_default.merge(date2, value, currentDate);
    let dateStr = formatDate(date2);
    if (!includeTime)
      toggle.close();
    notify(onSelect, [dateTime, dateStr]);
    handleChange(dateTime, dateStr, true);
    (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
  });
  const handleTimeChange = useEventCallback((date2) => {
    handleChange(date2, formatDate(date2), true);
  });
  const handleCalendarClick = useEventCallback((e) => {
    if (readOnly || disabled2)
      return;
    e.preventDefault();
    toggle();
  });
  const handleOpening = () => {
    tabTrap.start();
    requestAnimationFrame(() => {
      tabTrap.focus();
    });
  };
  const handleClosing = () => {
    tabTrap.stop();
    if (focused)
      focus();
  };
  function focus() {
    var _calRef$current, _ref$current2;
    if (open)
      (_calRef$current = calRef.current) == null ? void 0 : _calRef$current.focus();
    else
      (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.focus();
  }
  function inRangeValue2(value2) {
    if (value2 == null)
      return value2;
    return dates_default.max(dates_default.min(value2, max2), min2);
  }
  function formatDate(date2) {
    return date2 instanceof Date && !isNaN(date2.getTime()) ? localizer.formatDate(date2, currentFormat) : "";
  }
  (0, import_react50.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let shouldRenderList = useFirstFocusedRender(focused, open);
  const inputReadOnly = (inputProps == null ? void 0 : inputProps.readOnly) != null ? inputProps == null ? void 0 : inputProps.readOnly : readOnly;
  return import_react50.default.createElement(Widget_default, _extends22({}, elementProps, {
    defaultValue: void 0,
    open: !!open,
    dropUp,
    focused,
    disabled: disabled2,
    readOnly,
    onKeyDown: handleKeyDown,
    onKeyPress: handleKeyPress
  }, focusEvents, {
    className: (0, import_classnames18.default)(className, "rw-date-picker")
  }), import_react50.default.createElement(WidgetPicker_default, {
    className: containerClassName
  }, import_react50.default.createElement(DatePickerInput_default, _extends22({}, inputProps, {
    id: inputId,
    ref,
    role: "combobox",
    name,
    value,
    tabIndex,
    autoFocus,
    placeholder,
    disabled: disabled2,
    readOnly: inputReadOnly,
    formatter: currentFormat,
    displayFormat: valueDisplayFormat,
    editFormat: valueEditFormat,
    editing: focused,
    localizer,
    parse: dateParser,
    onChange: handleChange,
    "aria-haspopup": true,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-expanded": !!open,
    "aria-owns": dateId
  })), import_react50.default.createElement(InputAddon_default, {
    icon: selectIcon,
    label: localizer.messages.dateButton(),
    disabled: disabled2 || readOnly,
    onClick: handleCalendarClick
  })), !!shouldRenderList && import_react50.default.createElement(Popup2, _extends22({}, popupProps, {
    dropUp,
    open,
    role: "dialog",
    ref: calRef,
    id: dateId,
    className: "rw-calendar-popup",
    transition: popupTransition,
    onEntering: handleOpening,
    onExited: handleClosing
  }), import_react50.default.createElement(Calendar_default, _extends22({
    min: min2,
    max: max2,
    bordered: false
  }, calendarProps, {
    messages: Object.assign({}, messages2, calendarProps == null ? void 0 : calendarProps.messages),
    tabIndex: -1,
    value,
    autoFocus: false,
    onChange: handleDateSelect,
    currentDate,
    onCurrentDateChange,
    "aria-hidden": !open,
    "aria-live": "polite",
    "aria-labelledby": inputId
  })), includeTime && import_react50.default.createElement(TimeInput_default, _extends22({}, timeInputProps, {
    value,
    precision: timePrecision,
    onChange: handleTimeChange,
    datePart: currentDate
  }))));
});
DatePicker.displayName = "DatePicker";
DatePicker.propTypes = propTypes7;
DatePicker.defaultProps = defaultProps2;
var DatePicker_default = DatePicker;

// ../../../node_modules/react-widgets/esm/DropdownList.js
var import_classnames21 = __toESM(require_classnames());
var import_prop_types12 = __toESM(require_prop_types());
var import_react54 = __toESM(require_react());

// ../../../node_modules/@restart/hooks/esm/useTimeout.js
var import_react51 = __toESM(require_react());
var MAX_DELAY_MS = 2 ** 31 - 1;
function setChainedTimeout(handleRef, fn, timeoutAtMs) {
  const delayMs = timeoutAtMs - Date.now();
  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(() => setChainedTimeout(handleRef, fn, timeoutAtMs), MAX_DELAY_MS);
}
function useTimeout() {
  const isMounted = useMounted();
  const handleRef = (0, import_react51.useRef)();
  useWillUnmount(() => clearTimeout(handleRef.current));
  return (0, import_react51.useMemo)(() => {
    const clear2 = () => clearTimeout(handleRef.current);
    function set(fn, delayMs = 0) {
      if (!isMounted())
        return;
      clear2();
      if (delayMs <= MAX_DELAY_MS) {
        handleRef.current = setTimeout(fn, delayMs);
      } else {
        setChainedTimeout(handleRef, fn, Date.now() + delayMs);
      }
    }
    return {
      set,
      clear: clear2
    };
  }, []);
}

// ../../../node_modules/react-widgets/esm/AddToListOption.js
var PropTypes14 = __toESM(require_prop_types());
var import_react52 = __toESM(require_react());
var _excluded22 = ["children"];
function _extends23() {
  _extends23 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
function _objectWithoutPropertiesLoose23(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var CREATE_OPTION = {};
var propTypes8 = {
  searchTerm: PropTypes14.string,
  focused: PropTypes14.bool,
  onSelect: PropTypes14.func.isRequired,
  activeId: PropTypes14.string
};
function AddToListOption(_ref) {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose23(_ref, _excluded22);
  return import_react52.default.createElement(ListOption_default, _extends23({}, props, {
    dataItem: CREATE_OPTION,
    className: "rw-list-option-create",
    selected: false
  }), children);
}
AddToListOption.propTypes = propTypes8;
var AddToListOption_default = AddToListOption;

// ../../../node_modules/react-widgets/esm/DropdownListInput.js
var import_classnames19 = __toESM(require_classnames());
var import_react53 = __toESM(require_react());
var DropdownListInput = import_react53.default.forwardRef(function({
  name,
  autoComplete,
  value,
  allowSearch,
  placeholder,
  textAccessor,
  dataKeyAccessor,
  searchTerm,
  onSearch,
  onAutofill,
  onAutofillChange,
  renderValue,
  disabled: disabled2,
  readOnly
}, ref) {
  const [autofilling, setAutofilling] = (0, import_react53.useState)(false);
  const searchRef = (0, import_react53.useRef)(null);
  const handleAutofillDetect = ({
    animationName
  }) => {
    let autofilling2;
    if (animationName === "react-widgets-autofill-start")
      autofilling2 = true;
    else if (animationName === "react-widgets-autofill-cancel")
      autofilling2 = false;
    else
      return;
    setAutofilling(autofilling2);
    onAutofill(autofilling2);
  };
  const handleAutofill = (e) => {
    setAutofilling(false);
    onAutofillChange(e);
  };
  let dataKey = dataKeyAccessor(value);
  let text = value == null ? "" : textAccessor(value);
  let strValue = String(dataKey != null ? dataKey : "");
  if (strValue === String({}))
    strValue = "";
  const inputValue = !value && placeholder ? import_react53.default.createElement("span", {
    className: "rw-placeholder"
  }, placeholder) : renderValue ? renderValue({
    item: value,
    dataKey,
    text
  }) : text;
  (0, import_react53.useImperativeHandle)(ref, () => ({
    focus() {
      if (searchRef.current)
        searchRef.current.focus();
    }
  }));
  const style2 = autofilling ? {
    display: "none"
  } : void 0;
  return import_react53.default.createElement("div", {
    className: "rw-dropdown-list-input"
  }, autoComplete !== "off" && import_react53.default.createElement("input", {
    name,
    tabIndex: -1,
    disabled: disabled2,
    readOnly,
    value: strValue == null ? "" : strValue,
    autoComplete,
    onChange: handleAutofill,
    onAnimationStart: handleAutofillDetect,
    "aria-hidden": !autofilling,
    className: (0, import_classnames19.default)("rw-detect-autofill", !autofilling && "rw-sr")
  }), import_react53.default.createElement(import_react53.default.Fragment, null, allowSearch && import_react53.default.createElement("input", {
    ref: searchRef,
    disabled: disabled2,
    readOnly,
    style: style2,
    className: "rw-dropdownlist-search",
    autoComplete: "off",
    value: searchTerm || "",
    size: (searchTerm || "").length + 2,
    onChange: onSearch
  }), !searchTerm && import_react53.default.createElement("span", {
    className: "rw-dropdown-list-value",
    style: style2
  }, inputValue)));
});
DropdownListInput.displayName = "DropdownListInput";
var DropdownListInput_default = DropdownListInput;

// ../../../node_modules/react-widgets/esm/canShowCreate.js
function canShowCreate(allowCreate, {
  searchTerm = "",
  data,
  dataItems,
  accessors
}) {
  const eq2 = (v) => accessors.text(v).toLowerCase() === searchTerm.toLowerCase();
  const hasExtactMatch = () => dataItems && dataItems.some(eq2) || data.some(eq2);
  return !!((allowCreate === true || allowCreate === "onFilter" && searchTerm) && !hasExtactMatch());
}

// ../../../node_modules/react-widgets/esm/PickerCaret.js
var import_classnames20 = __toESM(require_classnames());
var React34 = __toESM(require_react());
var _excluded23 = ["className", "busy", "visible", "icon", "spinner"];
function _extends24() {
  _extends24 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
function _objectWithoutPropertiesLoose24(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DropdownCaret = (_ref) => {
  let {
    className,
    busy,
    visible,
    icon = caretDown,
    spinner = Spinner
  } = _ref, props = _objectWithoutPropertiesLoose24(_ref, _excluded23);
  return React34.createElement("span", _extends24({}, props, {
    "aria-hidden": "true",
    className: (0, import_classnames20.default)(className, "rw-btn rw-picker-caret")
  }), busy ? spinner : visible ? icon : null);
};
var PickerCaret_default = DropdownCaret;

// ../../../node_modules/react-widgets/esm/DropdownList.js
var _excluded24 = ["id", "autoFocus", "textField", "dataKey", "value", "defaultValue", "onChange", "open", "defaultOpen", "onToggle", "searchTerm", "defaultSearchTerm", "onSearch", "filter", "allowCreate", "delay", "focusFirstItem", "className", "containerClassName", "placeholder", "busy", "disabled", "readOnly", "selectIcon", "busySpinner", "dropUp", "tabIndex", "popupTransition", "name", "autoComplete", "onSelect", "onCreate", "onKeyPress", "onKeyDown", "onClick", "inputProps", "listProps", "popupProps", "renderListItem", "renderListGroup", "optionComponent", "renderValue", "groupBy", "onBlur", "onFocus", "listComponent", "popupComponent", "data", "messages"];
function _extends25() {
  _extends25 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
function _objectWithoutPropertiesLoose25(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes9 = {
  value: import_prop_types12.default.any,
  /**
   * @type {function (
   *  dataItems: ?any,
   *  metadata: {
   *    lastValue: ?any,
   *    searchTerm: ?string
   *    originalEvent: SyntheticEvent,
   *  }
   * ): void}
   */
  onChange: import_prop_types12.default.func,
  open: import_prop_types12.default.bool,
  onToggle: import_prop_types12.default.func,
  data: import_prop_types12.default.array,
  dataKey: accessor,
  textField: accessor,
  allowCreate: import_prop_types12.default.oneOf([true, false, "onFilter"]),
  /**
   * A React render prop for customizing the rendering of the DropdownList
   * value
   */
  renderValue: import_prop_types12.default.func,
  renderListItem: import_prop_types12.default.func,
  listComponent: elementType2,
  optionComponent: elementType2,
  renderPopup: import_prop_types12.default.func,
  renderListGroup: import_prop_types12.default.func,
  groupBy: accessor,
  /**
   *
   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}
   */
  onSelect: import_prop_types12.default.func,
  onCreate: import_prop_types12.default.func,
  /**
   * @type function(searchTerm: string, metadata: { action, lastSearchTerm, originalEvent? })
   */
  onSearch: import_prop_types12.default.func,
  searchTerm: import_prop_types12.default.string,
  busy: import_prop_types12.default.bool,
  /** Specify the element used to render the select (down arrow) icon. */
  selectIcon: import_prop_types12.default.node,
  /** Specify the element used to render the busy indicator */
  busySpinner: import_prop_types12.default.node,
  placeholder: import_prop_types12.default.string,
  dropUp: import_prop_types12.default.bool,
  popupTransition: elementType2,
  disabled: disabled.acceptsArray,
  readOnly: disabled,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types12.default.string,
  inputProps: import_prop_types12.default.object,
  listProps: import_prop_types12.default.object,
  messages: import_prop_types12.default.shape({
    open: import_prop_types12.default.string,
    emptyList: message,
    emptyFilter: message,
    createOption: message
  })
};
function useSearchWordBuilder(delay) {
  const timeout2 = useTimeout();
  const wordRef = (0, import_react54.useRef)("");
  function search(character, cb) {
    let word = (wordRef.current + character).toLowerCase();
    if (!character)
      return;
    wordRef.current = word;
    timeout2.set(() => {
      wordRef.current = "";
      cb(word);
    }, delay);
  }
  return search;
}
var DropdownListImpl = import_react54.default.forwardRef(function DropdownList(_ref, outerRef) {
  let {
    id,
    autoFocus,
    textField,
    dataKey,
    value,
    defaultValue,
    onChange,
    open,
    defaultOpen = false,
    onToggle,
    searchTerm,
    defaultSearchTerm = "",
    onSearch,
    filter = true,
    allowCreate = false,
    delay = 500,
    focusFirstItem,
    className,
    containerClassName,
    placeholder,
    busy,
    disabled: disabled2,
    readOnly,
    selectIcon = caretDown,
    busySpinner,
    dropUp,
    tabIndex,
    popupTransition,
    name,
    autoComplete,
    onSelect,
    onCreate,
    onKeyPress,
    onKeyDown,
    onClick,
    inputProps,
    listProps,
    popupProps,
    renderListItem,
    renderListGroup,
    optionComponent,
    renderValue,
    groupBy,
    onBlur,
    onFocus,
    listComponent: ListComponent = List_default,
    popupComponent: Popup2 = Popup_default,
    data: rawData = [],
    messages: userMessages
  } = _ref, elementProps = _objectWithoutPropertiesLoose25(_ref, _excluded24);
  const [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);
  const [currentSearch, handleSearch] = useUncontrolledProp(searchTerm, defaultSearchTerm, onSearch);
  const ref = (0, import_react54.useRef)(null);
  const filterRef = (0, import_react54.useRef)(null);
  const listRef = (0, import_react54.useRef)(null);
  const inputId = useInstanceId(id, "_input");
  const listId = useInstanceId(id, "_listbox");
  const activeId = useInstanceId(id, "_listbox_active_option");
  const accessors = useAccessors(textField, dataKey);
  const localizer = useLocalizer(userMessages);
  useAutoFocus(!!autoFocus, ref);
  const toggle = useDropdownToggle(currentOpen, handleOpen);
  const isDisabled = disabled2 === true;
  const isReadOnly = !!readOnly;
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2) {
      if (focused2) {
        if (filter)
          focus();
        return;
      }
      toggle.close();
      clearSearch();
    }
  });
  const data = useFilteredData(rawData, currentOpen ? filter : false, currentSearch, accessors.text);
  const selectedItem = (0, import_react54.useMemo)(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);
  const list = useFocusList({
    activeId,
    scope: ref,
    focusFirstItem,
    anchorItem: currentOpen ? selectedItem : void 0
  });
  const [autofilling, setAutofilling] = (0, import_react54.useState)(false);
  const nextSearchChar = useSearchWordBuilder(delay);
  const focusedItem = list.getFocused();
  useActiveDescendant(ref, activeId, focusedItem && currentOpen, [focusedItem]);
  const showCreateOption = canShowCreate(allowCreate, {
    searchTerm: currentSearch,
    data,
    accessors
  });
  const handleCreate = (event) => {
    notify(onCreate, [currentSearch]);
    clearSearch(event);
    toggle.close();
    focus();
  };
  const handleSelect = (dataItem2, originalEvent) => {
    if (readOnly || isDisabled)
      return;
    if (dataItem2 === void 0)
      return;
    originalEvent == null ? void 0 : originalEvent.preventDefault();
    if (dataItem2 === CREATE_OPTION) {
      handleCreate(originalEvent);
      return;
    }
    notify(onSelect, [dataItem2, {
      originalEvent
    }]);
    change(dataItem2, originalEvent, true);
    toggle.close();
    focus();
  };
  const handleClick = (e) => {
    if (readOnly || isDisabled)
      return;
    e.preventDefault();
    focus();
    toggle();
    notify(onClick, [e]);
  };
  const handleKeyDown = (e) => {
    if (readOnly || isDisabled)
      return;
    let {
      key,
      altKey,
      ctrlKey,
      shiftKey
    } = e;
    notify(onKeyDown, [e]);
    let closeWithFocus = () => {
      clearSearch();
      toggle.close();
      if (currentOpen)
        setTimeout(focus);
    };
    if (e.defaultPrevented)
      return;
    if (key === "End" && currentOpen && !shiftKey) {
      e.preventDefault();
      list.focus(list.last());
    } else if (key === "Home" && currentOpen && !shiftKey) {
      e.preventDefault();
      list.focus(list.first());
    } else if (key === "Escape" && (currentOpen || currentSearch)) {
      e.preventDefault();
      closeWithFocus();
    } else if (key === "Enter" && currentOpen && ctrlKey && showCreateOption) {
      e.preventDefault();
      handleCreate(e);
    } else if ((key === "Enter" || key === " " && !filter) && currentOpen) {
      e.preventDefault();
      if (list.hasFocused())
        handleSelect(list.getFocused(), e);
    } else if (key === "ArrowDown") {
      e.preventDefault();
      if (!currentOpen) {
        toggle.open();
        return;
      }
      list.focus(list.next());
    } else if (key === "ArrowUp") {
      e.preventDefault();
      if (altKey)
        return closeWithFocus();
      list.focus(list.prev());
    }
  };
  const handleKeyPress = (e) => {
    if (readOnly || isDisabled)
      return;
    notify(onKeyPress, [e]);
    if (e.defaultPrevented || filter)
      return;
    nextSearchChar(String.fromCharCode(e.which), (word) => {
      if (!currentOpen)
        return;
      let isValid3 = (item) => presets.startsWith(accessors.text(item).toLowerCase(), word.toLowerCase());
      const [items, focusedItem2] = list.get();
      const len = items.length;
      const startIdx = items.indexOf(focusedItem2) + 1;
      const offset2 = startIdx >= len ? 0 : startIdx;
      let idx = 0;
      let pointer = offset2;
      while (idx < len) {
        pointer = (idx + offset2) % len;
        let item = items[pointer];
        if (isValid3(list.toDataItem(item)))
          break;
        idx++;
      }
      if (idx === len)
        return;
      list.focus(items[pointer]);
    });
  };
  const handleInputChange = (e) => {
    if (!currentOpen && !e.target.value.trim()) {
      e.preventDefault();
    } else {
      search(e.target.value, e, "input");
    }
    toggle.open();
  };
  const handleAutofillChange = (e) => {
    let filledValue = e.target.value.toLowerCase();
    if (filledValue === "")
      return void change(null);
    for (const item of rawData) {
      if (String(accessors.value(item)).toLowerCase() === filledValue || accessors.text(item).toLowerCase() === filledValue) {
        change(item, e);
        break;
      }
    }
  };
  function change(nextValue, originalEvent, selected = false) {
    if (!accessors.matches(nextValue, currentValue)) {
      notify(handleChange, [nextValue, {
        originalEvent,
        source: selected ? "listbox" : "input",
        lastValue: currentValue,
        searchTerm: currentSearch
      }]);
      clearSearch(originalEvent);
      toggle.close();
    }
  }
  function focus() {
    if (filter)
      filterRef.current.focus();
    else
      ref.current.focus();
  }
  function clearSearch(originalEvent) {
    search("", originalEvent, "clear");
  }
  function search(nextSearchTerm, originalEvent, action = "input") {
    if (currentSearch !== nextSearchTerm)
      handleSearch(nextSearchTerm, {
        action,
        originalEvent,
        lastSearchTerm: currentSearch
      });
  }
  (0, import_react54.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let valueItem = accessors.findOrSelf(data, currentValue);
  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);
  const widgetProps = Object.assign({}, elementProps, {
    role: "combobox",
    id: inputId,
    //tab index when there is no filter input to take focus
    tabIndex: filter ? -1 : tabIndex || 0,
    // FIXME: only when item exists
    "aria-owns": elementProps["aria-owns"] ? `${listId} ${elementProps["aria-owns"]}` : listId,
    "aria-controls": elementProps["aria-controls"] ? `${listId} ${elementProps["aria-controls"]}` : listId,
    "aria-expanded": !!currentOpen,
    "aria-haspopup": "listbox",
    "aria-busy": !!busy,
    "aria-live": currentOpen ? "polite" : void 0,
    "aria-autocomplete": "list",
    "aria-disabled": isDisabled,
    "aria-readonly": isReadOnly
  });
  return import_react54.default.createElement(FocusListContext.Provider, {
    value: list.context
  }, import_react54.default.createElement(Widget_default, _extends25({}, widgetProps, {
    open: !!currentOpen,
    dropUp: !!dropUp,
    focused: !!focused,
    disabled: isDisabled,
    readOnly: isReadOnly,
    autofilling
  }, focusEvents, {
    onKeyDown: handleKeyDown,
    onKeyPress: handleKeyPress,
    className: (0, import_classnames21.default)(className, "rw-dropdown-list"),
    ref
  }), import_react54.default.createElement(WidgetPicker_default, {
    onClick: handleClick,
    tabIndex: filter ? -1 : 0,
    className: (0, import_classnames21.default)(containerClassName, "rw-widget-input")
  }, import_react54.default.createElement(DropdownListInput_default, _extends25({}, inputProps, {
    value: valueItem,
    dataKeyAccessor: accessors.value,
    textAccessor: accessors.text,
    name,
    readOnly,
    disabled: isDisabled,
    allowSearch: !!filter,
    searchTerm: currentSearch,
    ref: filterRef,
    autoComplete,
    onSearch: handleInputChange,
    onAutofill: setAutofilling,
    onAutofillChange: handleAutofillChange,
    placeholder,
    renderValue
  })), import_react54.default.createElement(PickerCaret_default, {
    visible: true,
    busy,
    icon: selectIcon,
    spinner: busySpinner
  })), shouldRenderPopup && import_react54.default.createElement(Popup2, _extends25({}, popupProps, {
    dropUp,
    open: currentOpen,
    transition: popupTransition,
    onEntered: focus,
    onEntering: () => listRef.current.scrollIntoView()
  }), import_react54.default.createElement(ListComponent, _extends25({}, listProps, {
    id: listId,
    data,
    tabIndex: -1,
    disabled: disabled2,
    groupBy,
    searchTerm: currentSearch,
    accessors,
    renderItem: renderListItem,
    renderGroup: renderListGroup,
    optionComponent,
    value: selectedItem,
    onChange: (d, meta) => handleSelect(d, meta.originalEvent),
    "aria-live": currentOpen ? "polite" : void 0,
    "aria-labelledby": inputId,
    "aria-hidden": !currentOpen,
    ref: listRef,
    messages: {
      emptyList: rawData.length ? localizer.messages.emptyFilter : localizer.messages.emptyList
    }
  })), showCreateOption && import_react54.default.createElement(AddToListOption_default, {
    onSelect: handleCreate
  }, localizer.messages.createOption(currentValue, currentSearch || "")))));
});
DropdownListImpl.displayName = "DropdownList";
DropdownListImpl.propTypes = propTypes9;
var DropdownList_default = DropdownListImpl;

// ../../../node_modules/react-widgets/esm/Listbox.js
var import_prop_types13 = __toESM(require_prop_types());
var import_classnames22 = __toESM(require_classnames());
var import_react55 = __toESM(require_react());
var _excluded25 = ["defaultValue", "value", "onChange", "textField", "dataKey", "data", "onKeyDown", "disabled", "readOnly", "onBlur", "onFocus", "multiple"];
function _extends26() {
  _extends26 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
function _objectWithoutPropertiesLoose26(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes10 = {
  data: import_prop_types13.default.array,
  dataKey: accessor,
  textField: accessor,
  onSelect: import_prop_types13.default.func,
  onMove: import_prop_types13.default.func,
  onHoverOption: import_prop_types13.default.func,
  optionComponent: import_prop_types13.default.elementType,
  renderItem: import_prop_types13.default.func,
  renderGroup: import_prop_types13.default.func,
  focusedItem: import_prop_types13.default.any,
  selectedItem: import_prop_types13.default.any,
  searchTerm: import_prop_types13.default.string,
  /**
   * @example false
   */
  disabled: disabled.acceptsArray,
  messages: import_prop_types13.default.shape({
    emptyList: import_prop_types13.default.func.isRequired
  })
};
var Listbox = import_react55.default.forwardRef(function Listbox2(_ref, _outerRef) {
  let {
    defaultValue,
    value: propsValue,
    onChange: propsOnChange,
    textField,
    dataKey,
    data,
    onKeyDown,
    disabled: disabled2,
    readOnly,
    onBlur,
    onFocus,
    multiple
  } = _ref, props = _objectWithoutPropertiesLoose26(_ref, _excluded25);
  const [value, onChange] = useUncontrolledProp(propsValue, defaultValue, propsOnChange);
  const accessors = useAccessors(textField, dataKey);
  const dataItems = (0, import_react55.useMemo)(() => makeArray(value, multiple).map((item) => accessors.findOrSelf(data, item)), [value, multiple, accessors, data]);
  const ref = (0, import_react55.useRef)(null);
  const lastItemRef = (0, import_react55.useRef)(dataItems[dataItems.length - 1]);
  const list = useFocusList({
    scope: ref,
    anchorItem: lastItemRef.current
  });
  const isDisabled = disabled2 === true;
  const handleChange = (dataItem2, meta) => {
    if (isDisabled || readOnly)
      return;
    lastItemRef.current = meta.dataItem;
    onChange(dataItem2, meta);
  };
  const handleSelect = useHandleSelect(!!multiple, dataItems, handleChange);
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2) {
      if (!focused2) {
        list.focus(void 0);
      } else {
        focus({
          preventScroll: true
        });
      }
    }
  });
  function focus(opts) {
    if (ref.current)
      ref.current.focus(opts);
  }
  const handleKeyDown = (e) => {
    if (isDisabled || readOnly)
      return;
    let {
      key,
      shiftKey
    } = e;
    notify(onKeyDown, [e]);
    if (e.defaultPrevented)
      return;
    if (key === "End" && !shiftKey) {
      e.preventDefault();
      list.focus(list.last());
    } else if (key === "Home" && !shiftKey) {
      e.preventDefault();
      list.focus(list.first());
    } else if (key === "Enter" || key === " ") {
      e.preventDefault();
      if (list.getFocused())
        handleSelect(list.getFocused(), e);
    } else if (key === "ArrowDown") {
      e.preventDefault();
      list.focus(list.next());
    } else if (key === "ArrowUp") {
      e.preventDefault();
      list.focus(list.prev());
    }
  };
  const widgetProps = useWidgetProps({
    focused,
    readOnly,
    disabled: isDisabled,
    className: (0, import_classnames22.default)(props.className, "rw-listbox rw-widget-input rw-widget")
  });
  return import_react55.default.createElement(FocusListContext.Provider, {
    value: list.context
  }, import_react55.default.createElement(List_default, _extends26({}, props, widgetProps, {
    disabled: disabled2,
    tabIndex: isDisabled ? -1 : 0,
    data,
    elementRef: ref,
    value: dataItems,
    multiple,
    accessors
  }, focusEvents, {
    onChange: handleChange,
    onKeyDown: handleKeyDown
  })));
});
Listbox.displayName = "Listbox";
Listbox.propTypes = propTypes10;
var Listbox_default = Listbox;

// ../../../node_modules/react-widgets/esm/Multiselect.js
var import_classnames24 = __toESM(require_classnames());

// ../../../node_modules/dom-helpers/esm/closest.js
function closest(node3, selector, stopAt) {
  if (node3.closest && !stopAt)
    node3.closest(selector);
  var nextNode = node3;
  do {
    if (matches(nextNode, selector))
      return nextNode;
    nextNode = nextNode.parentElement;
  } while (nextNode && nextNode !== stopAt && nextNode.nodeType === document.ELEMENT_NODE);
  return null;
}

// ../../../node_modules/react-widgets/esm/Multiselect.js
var import_prop_types15 = __toESM(require_prop_types());
var import_react59 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/MultiselectInput.js
var import_prop_types14 = __toESM(require_prop_types());
var import_react56 = __toESM(require_react());
var _excluded26 = ["disabled", "readOnly"];
function _extends27() {
  _extends27 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
function _objectWithoutPropertiesLoose27(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes11 = {
  value: import_prop_types14.default.string,
  placeholder: import_prop_types14.default.string,
  maxLength: import_prop_types14.default.number,
  onChange: import_prop_types14.default.func.isRequired,
  disabled,
  readOnly: disabled
};
var MultiselectInput = import_react56.default.forwardRef((_ref, ref) => {
  let {
    disabled: disabled2,
    readOnly
  } = _ref, props = _objectWithoutPropertiesLoose27(_ref, _excluded26);
  let size = Math.max(String(props.value || props.placeholder || "").length, 1) + 1;
  return import_react56.default.createElement("input", _extends27({
    spellCheck: "false",
    autoCapitalize: "off"
  }, props, {
    size,
    ref,
    autoComplete: "off",
    className: "rw-multiselect-input",
    "aria-disabled": disabled2,
    "aria-readonly": readOnly,
    disabled: disabled2,
    readOnly
  }));
});
MultiselectInput.displayName = "MultiselectInput";
MultiselectInput.propTypes = propTypes11;
var MultiselectInput_default = MultiselectInput;

// ../../../node_modules/react-widgets/esm/MultiselectTagList.js
var import_react58 = __toESM(require_react());

// ../../../node_modules/react-widgets/esm/MultiselectTag.js
var import_classnames23 = __toESM(require_classnames());
var import_react57 = __toESM(require_react());
function MultiselectTag({
  className,
  children,
  style: style2,
  label,
  disabled: disabled2,
  readOnly,
  onRemove,
  clearTagIcon,
  dataItem: dataItem2
}) {
  const [ref, focused, id] = useListOption(dataItem2);
  const handleRemove = (event) => {
    if (!disabled2)
      onRemove(dataItem2, event);
  };
  return import_react57.default.createElement("div", {
    ref,
    role: "option",
    id,
    "data-rw-option": "",
    "data-rw-focusable": disabled2 ? void 0 : "",
    "data-rw-focused": focused ? "" : void 0,
    className: (0, import_classnames23.default)(className, "rw-multiselect-tag", disabled2 && "rw-state-disabled", focused && !disabled2 && "rw-state-focus"),
    style: style2
  }, import_react57.default.createElement("span", {
    className: "rw-multiselect-tag-label"
  }, children), import_react57.default.createElement("button", {
    type: "button",
    tabIndex: -1,
    onClick: handleRemove,
    onTouchEnd: handleRemove,
    disabled: disabled2 || readOnly,
    className: "rw-multiselect-tag-btn",
    "aria-label": label || "Remove item"
  }, clearTagIcon));
}
var MultiselectTag_default = MultiselectTag;

// ../../../node_modules/react-widgets/esm/MultiselectTagList.js
function MultiselectTagList({
  id,
  value,
  textAccessor,
  label,
  disabled: disabled2,
  readOnly,
  onDelete,
  children,
  clearTagIcon,
  renderTagValue,
  tagOptionComponent: TagOption = MultiselectTag_default
}) {
  return import_react58.default.createElement("div", {
    id,
    role: "listbox",
    "aria-label": label,
    "aria-multiselectable": "true",
    "aria-orientation": "horizontal",
    className: "rw-multiselect-taglist"
  }, value.map((item, i) => {
    const itemDisabled = Array.isArray(disabled2) ? disabled2.includes(item) : !!disabled2;
    return import_react58.default.createElement(TagOption, {
      key: i,
      dataItem: item,
      onRemove: onDelete,
      clearTagIcon,
      disabled: itemDisabled,
      readOnly
    }, renderTagValue ? renderTagValue({
      item
    }) : textAccessor(item));
  }), children);
}
var MultiselectTagList_default = MultiselectTagList;

// ../../../node_modules/react-widgets/esm/Multiselect.js
var _excluded27 = ["dataKey", "textField", "autoFocus", "id", "value", "defaultValue", "onChange", "open", "defaultOpen", "onToggle", "focusFirstItem", "searchTerm", "defaultSearchTerm", "onSearch", "filter", "allowCreate", "className", "containerClassName", "placeholder", "busy", "disabled", "readOnly", "selectIcon", "clearTagIcon", "busySpinner", "dropUp", "tabIndex", "popupTransition", "showPlaceholderWithValues", "showSelectedItemsInList", "onSelect", "onCreate", "onKeyDown", "onBlur", "onFocus", "inputProps", "listProps", "popupProps", "renderListItem", "renderListGroup", "renderTagValue", "optionComponent", "tagOptionComponent", "groupBy", "listComponent", "popupComponent", "tagListComponent", "data", "messages"];
function _extends28() {
  _extends28 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
function _objectWithoutPropertiesLoose28(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var ENTER = 13;
var INSERT = "insert";
var REMOVE = "remove";
var propTypes12 = {
  data: import_prop_types15.default.array,
  //-- controlled props --
  value: import_prop_types15.default.array,
  /**
   * @type {function (
   *  dataItems: ?any[],
   *  metadata: {
   *    dataItem: any,
   *    action: 'insert' | 'remove',
   *    originalEvent: SyntheticEvent,
   *    lastValue: ?any[],
   *    searchTerm: ?string
   *  }
   * ): void}
   */
  onChange: import_prop_types15.default.func,
  searchTerm: import_prop_types15.default.string,
  /**
   * @type {function (
   *  searchTerm: ?string,
   *  metadata: {
   *    action: 'clear' | 'input',
   *    lastSearchTerm: ?string,
   *    originalEvent: SyntheticEvent,
   *  }
   * ): void}
   */
  onSearch: import_prop_types15.default.func,
  open: import_prop_types15.default.bool,
  handleOpen: import_prop_types15.default.func,
  //-------------------------------------------
  dataKey: accessor,
  textField: accessor,
  renderTagValue: import_prop_types15.default.func,
  renderListItem: import_prop_types15.default.func,
  renderListGroup: import_prop_types15.default.func,
  groupBy: accessor,
  allowCreate: import_prop_types15.default.oneOf([true, false, "onFilter"]),
  /**
   *
   * @type { (dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void }
   */
  onSelect: import_prop_types15.default.func,
  /**
   * @type { (searchTerm: string) => void }
   */
  onCreate: import_prop_types15.default.func,
  busy: import_prop_types15.default.bool,
  /** Specify the element used to render the select (down arrow) icon. */
  selectIcon: import_prop_types15.default.node,
  /** Specify the element used to render tag clear icons. */
  clearTagIcon: import_prop_types15.default.node,
  /** Specify the element used to render the busy indicator */
  busySpinner: import_prop_types15.default.node,
  dropUp: import_prop_types15.default.bool,
  popupTransition: import_prop_types15.default.elementType,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types15.default.string,
  inputProps: import_prop_types15.default.object,
  listProps: import_prop_types15.default.object,
  autoFocus: import_prop_types15.default.bool,
  placeholder: import_prop_types15.default.string,
  /** Continue to show the input placeholder even if tags are selected */
  showPlaceholderWithValues: import_prop_types15.default.bool,
  /** Continue to show the selected items in the dropdown list */
  showSelectedItemsInList: import_prop_types15.default.bool,
  disabled: disabled.acceptsArray,
  readOnly: disabled,
  messages: import_prop_types15.default.shape({
    open: message,
    emptyList: message,
    emptyFilter: message,
    createOption: message,
    tagsLabel: message,
    selectedItems: message,
    noneSelected: message,
    removeLabel: message
  })
};
var EMPTY_ARRAY = [];
function useMultiselectData(value = EMPTY_ARRAY, data, accessors, filter, searchTerm, showSelectedItemsInList) {
  data = (0, import_react59.useMemo)(() => showSelectedItemsInList ? data : data.filter((i) => !value.some((v) => accessors.matches(i, v))), [data, showSelectedItemsInList, value, accessors]);
  return [useFilteredData(data, filter || false, searchTerm, accessors.text), data.length];
}
var Multiselect = import_react59.default.forwardRef(function Multiselect2(_ref, outerRef) {
  let {
    dataKey,
    textField,
    autoFocus,
    id,
    value,
    defaultValue = [],
    onChange,
    open,
    defaultOpen = false,
    onToggle,
    focusFirstItem = false,
    searchTerm,
    defaultSearchTerm = "",
    onSearch,
    filter = "startsWith",
    allowCreate = false,
    className,
    containerClassName,
    placeholder,
    busy,
    disabled: disabled2,
    readOnly,
    selectIcon,
    clearTagIcon = times,
    busySpinner,
    dropUp,
    tabIndex,
    popupTransition,
    showPlaceholderWithValues = false,
    showSelectedItemsInList = false,
    onSelect,
    onCreate,
    onKeyDown,
    onBlur,
    onFocus,
    inputProps,
    listProps,
    popupProps,
    renderListItem,
    renderListGroup,
    renderTagValue,
    optionComponent,
    tagOptionComponent,
    groupBy,
    listComponent: ListComponent = List_default,
    popupComponent: Popup2 = Popup_default,
    tagListComponent: TagList = MultiselectTagList_default,
    data: rawData = [],
    messages: userMessages
  } = _ref, elementProps = _objectWithoutPropertiesLoose28(_ref, _excluded27);
  let [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);
  const [currentSearch, handleSearch] = useUncontrolledProp(searchTerm, defaultSearchTerm, onSearch);
  const ref = (0, import_react59.useRef)(null);
  const inputRef = (0, import_react59.useRef)(null);
  const listRef = (0, import_react59.useRef)(null);
  const inputId = useInstanceId(id, "_input");
  const tagsId = useInstanceId(id, "_taglist");
  const listId = useInstanceId(id, "_listbox");
  const createId = useInstanceId(id, "_createlist_option");
  const activeTagId = useInstanceId(id, "_taglist_active_tag");
  const activeOptionId = useInstanceId(id, "_listbox_active_option");
  const accessors = useAccessors(textField, dataKey);
  const messages2 = useMessagesWithDefaults(userMessages);
  const toggle = useDropdownToggle(currentOpen, handleOpen);
  const isDisabled = disabled2 === true;
  const isReadOnly = !!readOnly;
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2, event) {
      if (focused2)
        return focus();
      toggle.close();
      clearSearch(event);
      tagList.focus(null);
    }
  });
  const dataItems = (0, import_react59.useMemo)(() => currentValue.map((item) => accessors.findOrSelf(rawData, item)), [rawData, currentValue, accessors]);
  const [data, lengthWithoutValues] = useMultiselectData(dataItems, rawData, accessors, currentOpen ? filter : false, currentSearch, showSelectedItemsInList);
  const list = useFocusList({
    scope: ref,
    scopeSelector: ".rw-popup",
    focusFirstItem,
    activeId: activeOptionId,
    anchorItem: currentOpen ? dataItems[dataItems.length - 1] : void 0
  });
  const tagList = useFocusList({
    scope: ref,
    scopeSelector: ".rw-multiselect-taglist",
    activeId: activeTagId
  });
  const showCreateOption = canShowCreate(allowCreate, {
    searchTerm: currentSearch,
    data,
    dataItems,
    accessors
  });
  const focusedTag = tagList.getFocused();
  (0, import_react59.useEffect)(() => {
    if (currentOpen)
      return;
    setActiveDescendant(inputRef.current, focusedTag ? activeTagId : "");
  }, [activeTagId, currentOpen, focusedTag]);
  const focusedItem = list.getFocused();
  (0, import_react59.useEffect)(() => {
    if (!currentOpen)
      return;
    setActiveDescendant(inputRef.current, focusedItem ? activeOptionId : "");
  }, [activeOptionId, currentOpen, focusedItem]);
  const handleDelete = (dataItem2, event) => {
    if (isDisabled || readOnly || tagList.size() === 0)
      return;
    focus();
    change(dataItem2, event, REMOVE);
  };
  const deletingRef = (0, import_react59.useRef)(false);
  const handleSearchKeyDown = (e) => {
    if (e.key === "Backspace" && e.currentTarget.value && !deletingRef.current)
      deletingRef.current = true;
  };
  const handleSearchKeyUp = (e) => {
    if (e.key === "Backspace" && deletingRef.current) {
      deletingRef.current = false;
    }
  };
  const handleInputChange = (e) => {
    search(e.target.value, e, "input");
    toggle.open();
  };
  const handleClick = (e) => {
    if (isDisabled || readOnly)
      return;
    e.preventDefault();
    focus();
    if (closest(e.target, ".rw-select") && currentOpen) {
      toggle.close();
    } else
      toggle.open();
  };
  const handleDoubleClick = () => {
    if (isDisabled || !inputRef.current)
      return;
    focus();
    if (inputRef.current)
      inputRef.current.select();
  };
  const handleSelect = (dataItem2, originalEvent) => {
    if (dataItem2 === void 0)
      return;
    originalEvent.preventDefault();
    if (dataItem2 === CREATE_OPTION) {
      handleCreate(originalEvent);
      return;
    }
    notify(onSelect, [dataItem2, {
      originalEvent
    }]);
    if (!showSelectedItemsInList || !dataItems.includes(dataItem2)) {
      change(dataItem2, originalEvent, INSERT);
    } else {
      change(dataItem2, originalEvent, REMOVE);
    }
    focus();
  };
  const handleCreate = (event) => {
    notify(onCreate, [currentSearch]);
    clearSearch(event);
    focus();
  };
  const handleKeyDown = (event) => {
    if (readOnly) {
      event.preventDefault();
      return;
    }
    let {
      key,
      keyCode,
      altKey,
      ctrlKey
    } = event;
    notify(onKeyDown, [event]);
    if (event.defaultPrevented)
      return;
    if (key === "ArrowDown") {
      event.preventDefault();
      if (!currentOpen) {
        toggle.open();
        return;
      }
      list.focus(list.next());
      tagList.focus(null);
    } else if (key === "ArrowUp" && (currentOpen || altKey)) {
      event.preventDefault();
      if (altKey) {
        toggle.close();
        return;
      }
      list.focus(list.prev());
      tagList.focus(null);
    } else if (key === "End") {
      event.preventDefault();
      if (currentOpen) {
        list.focus(list.last());
        tagList.focus(null);
      } else {
        tagList.focus(tagList.last());
        list.focus(null);
      }
    } else if (key === "Home") {
      event.preventDefault();
      if (currentOpen)
        list.focus(list.first());
      else
        list.focus(tagList.first());
    } else if (currentOpen && keyCode === ENTER) {
      event.preventDefault();
      if (ctrlKey && showCreateOption) {
        return handleCreate(event);
      }
      handleSelect(list.getFocused(), event);
    } else if (key === "Escape") {
      if (currentOpen)
        toggle.close();
      else
        tagList.focus(null);
    } else if (!currentSearch && !deletingRef.current) {
      if (key === "ArrowLeft") {
        tagList.focus(tagList.prev({
          behavior: "loop"
        }));
      } else if (key === "ArrowRight") {
        tagList.focus(tagList.next({
          behavior: "loop"
        }));
      } else if (key === "Delete" && tagList.getFocused()) {
        handleDelete(tagList.getFocused(), event);
      } else if (key === "Backspace") {
        handleDelete(tagList.toDataItem(tagList.last()), event);
      } else if (key === " " && !currentOpen) {
        event.preventDefault();
        toggle.open();
      }
    }
  };
  function change(dataItem2, originalEvent, action) {
    let nextDataItems = dataItems;
    switch (action) {
      case INSERT:
        nextDataItems = nextDataItems.concat(dataItem2);
        break;
      case REMOVE:
        nextDataItems = nextDataItems.filter((d) => d !== dataItem2);
        break;
    }
    handleChange(nextDataItems, {
      action,
      dataItem: dataItem2,
      originalEvent,
      searchTerm: currentSearch,
      lastValue: currentValue
    });
    clearSearch(originalEvent);
  }
  function clearSearch(originalEvent) {
    search("", originalEvent, "clear");
  }
  function search(nextSearchTerm, originalEvent, action = "input") {
    if (nextSearchTerm !== currentSearch)
      handleSearch(nextSearchTerm, {
        action,
        originalEvent,
        lastSearchTerm: currentSearch
      });
  }
  function focus() {
    if (inputRef.current)
      inputRef.current.focus();
  }
  (0, import_react59.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);
  let shouldRenderTags = !!dataItems.length;
  let inputOwns = `${listId} ` + (shouldRenderTags ? tagsId : "") + (showCreateOption ? createId : "");
  return import_react59.default.createElement(Widget_default, _extends28({}, elementProps, {
    ref,
    open: currentOpen,
    dropUp,
    focused,
    disabled: isDisabled,
    readOnly: isReadOnly,
    onKeyDown: handleKeyDown
  }, focusEvents, {
    className: (0, import_classnames24.default)(className, "rw-multiselect")
  }), import_react59.default.createElement(WidgetPicker_default, {
    onClick: handleClick,
    onTouchEnd: handleClick,
    onDoubleClick: handleDoubleClick,
    className: (0, import_classnames24.default)(containerClassName, "rw-widget-input")
  }, import_react59.default.createElement(FocusListContext.Provider, {
    value: tagList.context
  }, import_react59.default.createElement(TagList, {
    id: tagsId,
    textAccessor: accessors.text,
    clearTagIcon,
    label: messages2.tagsLabel(),
    value: dataItems,
    readOnly: isReadOnly,
    disabled: disabled2,
    onDelete: handleDelete,
    tagOptionComponent,
    renderTagValue
  }, import_react59.default.createElement(MultiselectInput_default, _extends28({}, inputProps, {
    role: "combobox",
    autoFocus,
    tabIndex: tabIndex || 0,
    "aria-expanded": !!currentOpen,
    "aria-busy": !!busy,
    "aria-owns": inputOwns,
    "aria-controls": listId,
    "aria-haspopup": "listbox",
    "aria-autocomplete": "list",
    value: currentSearch,
    disabled: isDisabled,
    readOnly: isReadOnly,
    placeholder: (currentValue.length && !showPlaceholderWithValues ? "" : placeholder) || "",
    onKeyDown: handleSearchKeyDown,
    onKeyUp: handleSearchKeyUp,
    onChange: handleInputChange,
    ref: inputRef
  })))), import_react59.default.createElement(PickerCaret_default, {
    busy,
    spinner: busySpinner,
    icon: selectIcon,
    visible: focused
  })), import_react59.default.createElement(FocusListContext.Provider, {
    value: list.context
  }, shouldRenderPopup && import_react59.default.createElement(Popup2, _extends28({}, popupProps, {
    dropUp,
    open: currentOpen,
    transition: popupTransition,
    onEntering: () => listRef.current.scrollIntoView()
  }), import_react59.default.createElement(ListComponent, _extends28({}, listProps, {
    id: listId,
    data,
    tabIndex: -1,
    disabled: disabled2,
    searchTerm: currentSearch,
    accessors,
    renderItem: renderListItem,
    renderGroup: renderListGroup,
    value: dataItems,
    groupBy,
    optionComponent,
    onChange: (d, meta) => handleSelect(d, meta.originalEvent),
    "aria-live": "polite",
    "aria-labelledby": inputId,
    "aria-hidden": !currentOpen,
    ref: listRef,
    messages: {
      emptyList: lengthWithoutValues ? messages2.emptyFilter : messages2.emptyList
    }
  })), showCreateOption && import_react59.default.createElement(AddToListOption_default, {
    onSelect: handleCreate
  }, messages2.createOption(currentValue, currentSearch)))));
});
Multiselect.displayName = "Multiselect";
Multiselect.propTypes = propTypes12;
var Multiselect_default = Multiselect;

// ../../../node_modules/react-widgets/esm/NumberPicker.js
var import_classnames25 = __toESM(require_classnames());
var import_prop_types17 = __toESM(require_prop_types());
var import_react61 = __toESM(require_react());

// ../../../node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active2 = doc.activeElement;
    if (!active2 || !active2.nodeName)
      return null;
    return active2;
  } catch (e) {
    return doc.body;
  }
}

// ../../../node_modules/react-widgets/esm/NumberInput.js
var import_prop_types16 = __toESM(require_prop_types());
var import_react60 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
var _excluded28 = ["disabled", "readOnly", "placeholder", "innerRef", "min", "max", "localizer", "editing"];
function _extends29() {
  _extends29 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
function _objectWithoutPropertiesLoose29(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var isSign = (val) => (val || "").trim() === "-";
function isPaddedZeros(str, localizer) {
  let localeChar = localizer.decimalCharacter();
  let [_, decimals] = str.split(localeChar);
  return !!(decimals && decimals.match(/0+$/));
}
function isAtDelimiter(str, localizer) {
  let localeChar = localizer.decimalCharacter();
  let lastIndex = str.length - 1;
  if (str.length < 1)
    return false;
  let char = str[lastIndex];
  return !!(char === localeChar && str.indexOf(char) === lastIndex);
}
var NumberPickerInput = class extends import_react60.default.Component {
  constructor(...args) {
    super(...args);
    this.state = {};
    this.handleBlur = (event) => {
      let str = this.state.stringValue;
      let number = this.parseNumber(str);
      if (this.isIntermediateValue(number, str)) {
        if (isNaN(number)) {
          number = null;
        }
        this.props.onChange(number, event);
      }
    };
    this.handleChange = (event) => {
      let {
        value,
        onChange
      } = this.props;
      let stringValue = event.target.value, numberValue = this.parseNumber(stringValue);
      let isIntermediate = this.isIntermediateValue(numberValue, stringValue);
      if (stringValue == null || stringValue.trim() === "") {
        this.setStringValue("");
        onChange(null, event);
        return;
      }
      if (isIntermediate) {
        this.setStringValue(stringValue);
      } else if (numberValue !== value) {
        onChange(numberValue, event);
      } else if (stringValue != this.state.stringValue) {
        this.setStringValue(stringValue);
      }
    };
  }
  getSnapshotBeforeUpdate({
    editing
  }) {
    return {
      reselectText: !editing && this.props.editing && this.isSelectingAllText()
    };
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    let {
      value,
      editing,
      localizer
    } = nextProps;
    let decimal = localizer.decimalCharacter();
    const stringValue = value == null || isNaN(value) ? "" : editing ? ("" + value).replace(".", decimal) : localizer.formatNumber(
      value
      /*, 'default'*/
    );
    if (prevState.lastValueFromProps !== stringValue)
      return {
        stringValue,
        lastValueFromProps: stringValue
      };
    return null;
  }
  componentDidUpdate(_, __, {
    reselectText
  }) {
    if (reselectText)
      (0, import_react_dom2.findDOMNode)(this).select();
  }
  // this intermediate state is for when one runs into
  // the decimal or are typing the number
  setStringValue(stringValue) {
    this.setState({
      stringValue
    });
  }
  isIntermediateValue(num, str) {
    let {
      localizer,
      min: min2
    } = this.props;
    return !!(num < min2 || isSign(str) || isAtDelimiter(str, localizer) || isPaddedZeros(str, localizer));
  }
  isSelectingAllText() {
    const node3 = canUseDOM_default && (0, import_react_dom2.findDOMNode)(this);
    return canUseDOM_default && activeElement() === node3 && node3.selectionStart === 0 && node3.selectionEnd === node3.value.length;
  }
  parseNumber(strVal) {
    let {
      localizer,
      parse: userParse
    } = this.props;
    if (userParse)
      return userParse(strVal, localizer);
    return localizer.parseNumber(strVal);
  }
  render() {
    let _this$props = this.props, {
      disabled: disabled2,
      readOnly,
      placeholder,
      // eslint-disable-next-line react/prop-types
      innerRef,
      min: min2,
      max: max2
    } = _this$props, props = _objectWithoutPropertiesLoose29(_this$props, _excluded28);
    let value = this.state.stringValue;
    return import_react60.default.createElement(Input_default, _extends29({}, props, {
      ref: innerRef,
      inputMode: "numeric",
      className: "rw-widget-input",
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      "aria-valuenow": value,
      "aria-valuemin": isFinite(min2) ? min2 : void 0,
      "aria-valuemax": isFinite(max2) ? max2 : void 0,
      disabled: disabled2,
      readOnly,
      placeholder,
      value
    }));
  }
};
NumberPickerInput.defaultProps = {
  value: null,
  editing: false
};
NumberPickerInput.propTypes = {
  value: import_prop_types16.default.number,
  editing: import_prop_types16.default.bool,
  placeholder: import_prop_types16.default.string,
  localizer: import_prop_types16.default.object.isRequired,
  parse: import_prop_types16.default.func,
  min: import_prop_types16.default.number,
  max: import_prop_types16.default.number,
  disabled,
  readOnly: disabled,
  onChange: import_prop_types16.default.func.isRequired
};
var NumberInput_default = NumberPickerInput;

// ../../../node_modules/react-widgets/esm/NumberPicker.js
var _excluded29 = ["className", "containerClassName", "disabled", "readOnly", "value", "min", "max", "incrementIcon", "decrementIcon", "placeholder", "autoFocus", "tabIndex", "parse", "name", "onChange", "messages", "format", "onKeyDown", "onKeyPress", "onKeyUp", "inputProps", "precision", "step"];
function _extends30() {
  _extends30 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
function _objectWithoutPropertiesLoose30(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function createInterval(callback) {
  let fn;
  let id;
  const cancel = () => clearTimeout(id);
  id = window.setTimeout(fn = () => {
    id = window.setTimeout(fn, 35);
    callback();
  }, 500);
  return cancel;
}
function clamp2(value, min2, max2) {
  max2 = max2 == null ? Infinity : max2;
  min2 = min2 == null ? -Infinity : min2;
  if (value == null || value === "")
    return null;
  return Math.max(Math.min(typeof value == "string" ? parseInt(value) : value, max2), min2);
}
var propTypes13 = {
  /**
   * @example ['valuePicker', [ [1, null] ]]
   */
  value: import_prop_types17.default.number,
  /**
   * @example ['onChangePicker', [ [1, null] ]]
   */
  onChange: import_prop_types17.default.func,
  /**
   * The minimum number that the NumberPicker value.
   * @example ['prop', ['min', 0]]
   */
  min: import_prop_types17.default.number,
  /**
   * The maximum number that the NumberPicker value.
   *
   * @example ['prop', ['max', 0]]
   */
  max: import_prop_types17.default.number,
  /**
   * Amount to increase or decrease value when using the spinner buttons.
   *
   * @example ['prop', ['step', 5]]
   */
  step: import_prop_types17.default.number,
  /**
   * Specify how precise the `value` should be when typing, incrementing, or decrementing the value.
   * When empty, precision is parsed from the current `format` and culture.
   */
  precision: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.oneOf(["auto"])]),
  /**
   * A format string used to display the number value. Localizer dependent, read about [localization](localization) for more info.
   *
   * @example ['prop', { max: 1, min: -1 , defaultValue: 0.2585, format: "{ style: 'percent' }" }]
   */
  format: import_prop_types17.default.any,
  parse: import_prop_types17.default.func,
  incrementIcon: import_prop_types17.default.node,
  decrementIcon: import_prop_types17.default.node,
  /** @ignore */
  tabIndex: import_prop_types17.default.any,
  name: import_prop_types17.default.string,
  placeholder: import_prop_types17.default.string,
  onKeyDown: import_prop_types17.default.func,
  onKeyPress: import_prop_types17.default.func,
  onKeyUp: import_prop_types17.default.func,
  autoFocus: import_prop_types17.default.bool,
  /**
   * @example ['disabled', ['1']]
   */
  disabled,
  /**
   * @example ['readOnly', ['1.5']]
   */
  readOnly: disabled,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types17.default.string,
  inputProps: import_prop_types17.default.object,
  messages: import_prop_types17.default.shape({
    increment: import_prop_types17.default.string,
    decrement: import_prop_types17.default.string
  }),
  /** @ignore */
  localizer: import_prop_types17.default.object
};
var defaultProps3 = {
  incrementIcon: caretUp,
  decrementIcon: caretDown,
  min: -Infinity,
  max: Infinity,
  step: 1,
  precision: "auto"
};
function NumberPicker(uncontrolledProps) {
  const _useUncontrolled = useUncontrolled(uncontrolledProps, {
    value: "onChange"
  }), {
    className,
    containerClassName,
    disabled: disabled2,
    readOnly,
    value,
    min: min2,
    max: max2,
    incrementIcon,
    decrementIcon,
    placeholder,
    autoFocus,
    tabIndex,
    parse,
    name,
    onChange,
    messages: messages2,
    format,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    inputProps,
    precision,
    step: pStep
  } = _useUncontrolled, elementProps = _objectWithoutPropertiesLoose30(_useUncontrolled, _excluded29);
  const localizer = useLocalizer(messages2, {
    number: format
  });
  const ref = (0, import_react61.useRef)(null);
  const inputRef = (0, import_react61.useRef)(null);
  const repeaterRef = (0, import_react61.useRef)(null);
  const [focusEvents, focused] = useFocusManager2(ref, uncontrolledProps, {
    willHandle(focused2) {
      if (focused2)
        focus();
    }
  });
  const handleMouseDown = useEventCallback((direction, event) => {
    if (event)
      event.persist();
    let method = direction === "UP" ? increment : decrement;
    let value2 = method(event), atTop = direction === "UP" && value2 === max2, atBottom = direction === "DOWN" && value2 === min2;
    if (atTop || atBottom)
      handleMouseUp();
    else if (!repeaterRef.current) {
      repeaterRef.current = createInterval(() => {
        handleMouseDown(direction, event);
      });
    }
  });
  const handleMouseUp = useEventCallback(() => {
    if (!repeaterRef.current)
      return;
    repeaterRef.current();
    repeaterRef.current = null;
  });
  const handleKeyDown = useEventCallback((event) => {
    if (readOnly)
      return;
    let key = event.key;
    notify(onKeyDown, [event]);
    if (event.defaultPrevented)
      return;
    if (key === "End" && isFinite(max2))
      handleChange(max2, event);
    else if (key === "Home" && isFinite(min2))
      handleChange(min2, event);
    else if (key === "ArrowDown") {
      event.preventDefault();
      decrement(event);
    } else if (key === "ArrowUp") {
      event.preventDefault();
      increment(event);
    }
  });
  const handleChange = (rawValue, originalEvent = null) => {
    let nextValue = clamp2(rawValue, min2, max2);
    if (value !== nextValue)
      notify(onChange, [nextValue, {
        rawValue,
        originalEvent,
        lastValue: value
      }]);
  };
  function focus() {
    var _inputRef$current;
    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
  }
  function increment(event) {
    return step(pStep, event);
  }
  function decrement(event) {
    return step(-pStep, event);
  }
  function step(amount, event) {
    const nextValue = (value || 0) + amount;
    let p = precision === "auto" ? Math.max(getPrecision(value || 0), getPrecision(amount)) : precision;
    handleChange(p != null ? parseFloat(nextValue.toFixed(p)) : nextValue, event);
    return nextValue;
  }
  const clampedValue = clamp2(value, min2, max2);
  return import_react61.default.createElement(Widget_default, _extends30({}, elementProps, {
    focused,
    disabled: disabled2,
    readOnly,
    onKeyDown: handleKeyDown
  }, focusEvents, {
    ref,
    className: (0, import_classnames25.default)(className, "rw-number-picker")
  }), import_react61.default.createElement(WidgetPicker_default, {
    className: containerClassName
  }, import_react61.default.createElement(NumberInput_default, _extends30({}, inputProps, {
    role: "spinbutton",
    tabIndex,
    value: clampedValue,
    placeholder,
    autoFocus,
    editing: focused,
    localizer,
    parse,
    name,
    min: min2,
    max: max2,
    disabled: disabled2,
    readOnly,
    onChange: handleChange,
    onKeyPress,
    onKeyUp,
    innerRef: inputRef
  })), import_react61.default.createElement("span", {
    className: "rw-input-addon rw-number-picker-spinners"
  }, import_react61.default.createElement(Button_default, {
    icon: incrementIcon,
    className: "rw-picker-btn",
    disabled: clampedValue === max2 || disabled2 || readOnly,
    label: localizer.messages.increment({
      value: clampedValue,
      min: min2,
      max: max2
    }),
    onMouseUp: () => handleMouseUp(),
    onMouseDown: (e) => handleMouseDown("UP", e),
    onMouseLeave: () => handleMouseUp()
  }), import_react61.default.createElement(Button_default, {
    icon: decrementIcon,
    className: "rw-picker-btn",
    disabled: clampedValue === min2 || disabled2 || readOnly,
    label: localizer.messages.decrement({
      value: clampedValue,
      min: min2,
      max: max2
    }),
    onMouseUp: () => handleMouseUp(),
    onMouseDown: (e) => handleMouseDown("DOWN", e),
    onMouseLeave: () => handleMouseUp()
  }))));
}
NumberPicker.propTypes = propTypes13;
NumberPicker.defaultProps = defaultProps3;
var NumberPicker_default = NumberPicker;
function getPrecision(a) {
  if (!isFinite(a))
    return 0;
  let e = 1;
  let p = 0;
  while (Math.round(a * e) / e !== a) {
    e *= 10;
    p++;
  }
  return p;
}
export {
  Calendar_default as Calendar,
  Combobox_default as Combobox,
  DatePicker_default as DatePicker,
  DatePicker_default as DateTimePicker,
  DropdownList_default as DropdownList,
  Listbox_default as Listbox,
  Localization_default as Localization,
  Multiselect_default as Multiselect,
  NumberPicker_default as NumberPicker,
  SlideDownTransition_default as SlideDownTransition,
  SlideTransitionGroup_default as SlideTransitionGroup,
  TimeInput_default as TimeInput
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-widgets/esm/Icon.js:
  (*!
  Font Awesome Free 5.2.0 by @fontawesome - https://fontawesome.com
  License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
  *)
*/
//# sourceMappingURL=react-widgets.js.map
